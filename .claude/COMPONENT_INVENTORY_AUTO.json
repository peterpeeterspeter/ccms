{
  "discovery_date": "2025-08-26T21:41:12.951698",
  "total_components": 164,
  "categories": {
    "tools": [
      {
        "name": "real_supabase_research_tool",
        "path": "src/tools/real_supabase_research_tool.py",
        "category": "tool",
        "size": 7576,
        "last_modified": "2025-08-25T21:40:26.616548",
        "module_docstring": "\ud83d\udd0d Real Supabase Research Tool - Production Ready\n================================================\n\nProduction implementation of Supabase research tool with real database connectivity.\nFetches comprehensive casino intelligence (95+ fields) from actual Supabase database.",
        "classes": [
          {
            "name": "SupabaseResearchInput",
            "line": 23,
            "docstring": "Input schema for Supabase research tool"
          },
          {
            "name": "RealSupabaseResearchTool",
            "line": 28,
            "docstring": "\ud83d\udd0d Production LangChain tool for fetching comprehensive casino research from Supabase\n\nRetrieves 95+ field casino intelligence including:\n- Basic information (8 fields)\n- Licensing & regulation (10 fields) \n- Games & software (15 fields)\n- Bonuses & promotions (18 fields)\n- Payment methods (12 fields)\n- User experience (10 fields)\n- Customer support (8 fields)\n- Security & fair play (12 fields)\n- Technical specifications (6 fields)\n- Terms & conditions (6 fields)"
          }
        ],
        "functions": [],
        "imports": [
          "os",
          "typing",
          "logging",
          "pydantic",
          "dotenv",
          "supabase",
          "langchain.tools"
        ],
        "features": [
          "supabase_integration",
          "research_functionality",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 199
      },
      {
        "name": "wordpress_post_creation_tool",
        "path": "src/tools/wordpress_post_creation_tool.py",
        "category": "tool",
        "size": 5340,
        "last_modified": "2025-08-25T14:28:14.647921",
        "module_docstring": "\ud83d\udcdd WordPress Post Creation Tool - Claude.md Compliant\n===================================================\n\nLangChain BaseTool for creating new WordPress posts via REST API.\nHandles WordPress post creation with content, title, and metadata.\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "WordPressPostCreationInput",
            "line": 25,
            "docstring": "Input schema for WordPress post creation tool"
          },
          {
            "name": "WordPressPostCreationTool",
            "line": 35,
            "docstring": "\ud83d\udcdd LangChain tool for creating new WordPress posts\n\nClaude.md compliant tool that handles all HTTP operations for WordPress\npost creation. Used in LCEL chains via ToolNode."
          }
        ],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "base64",
          "requests",
          "pydantic",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "wordpress_api",
          "publishing",
          "async_support"
        ],
        "lines_of_code": 144
      },
      {
        "name": "firecrawl_screenshot_tool",
        "path": "src/tools/firecrawl_screenshot_tool.py",
        "category": "tool",
        "size": 5314,
        "last_modified": "2025-08-26T08:56:29.819365",
        "module_docstring": "\ud83d\udcf8 Firecrawl Screenshot Tool\n===========================\n\nProduction-ready tool for capturing casino screenshots using Firecrawl API",
        "classes": [
          {
            "name": "FirecrawlScreenshotInput",
            "line": 23,
            "docstring": "Input schema for Firecrawl screenshot tool"
          },
          {
            "name": "FirecrawlScreenshotTool",
            "line": 28,
            "docstring": "\ud83d\udcf8 Production screenshot capture tool using Firecrawl API\n\nCaptures high-quality screenshots of casino websites for review articles"
          }
        ],
        "functions": [],
        "imports": [
          "os",
          "typing",
          "logging",
          "requests",
          "pydantic",
          "dotenv",
          "time",
          "langchain.tools"
        ],
        "features": [
          "firecrawl_api",
          "screenshot_capture",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 135
      },
      {
        "name": "image_download_tool",
        "path": "src/tools/image_download_tool.py",
        "category": "tool",
        "size": 5436,
        "last_modified": "2025-08-25T14:21:43.942643",
        "module_docstring": "\ud83d\udce5 Image Download Tool - Claude.md Compliant\n==========================================\n\nLangChain BaseTool for downloading casino images from URLs.\nHandles actual image downloading with validation and storage.\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "ImageDownloadInput",
            "line": 27,
            "docstring": "Input schema for image download tool"
          },
          {
            "name": "ImageDownloadTool",
            "line": 32,
            "docstring": "\ud83d\udce5 LangChain tool for downloading casino images from URLs\n\nClaude.md compliant tool that handles all HTTP operations for image\ndownloading. Used in LCEL chains via ToolNode."
          }
        ],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "urllib.parse",
          "requests",
          "pydantic",
          "pathlib",
          "time",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "async_support"
        ],
        "lines_of_code": 138
      },
      {
        "name": "real_supabase_config_tool",
        "path": "src/tools/real_supabase_config_tool.py",
        "category": "tool",
        "size": 10407,
        "last_modified": "2025-08-25T18:17:10.138958",
        "module_docstring": "\ud83d\uddc3\ufe0f Real Supabase Configuration Tool - Production Ready\n=====================================================\n\nProduction implementation of Supabase config tool with real database connectivity.\nReplaces the simulation with actual Supabase client operations.",
        "classes": [
          {
            "name": "SupabaseConfigInput",
            "line": 23,
            "docstring": "Input schema for Supabase config tool"
          },
          {
            "name": "RealSupabaseConfigTool",
            "line": 30,
            "docstring": "\ud83d\uddc3\ufe0f Production LangChain tool for fetching merged tenant configuration from Supabase\n\nConfig hierarchy (highest precedence wins):\n1. tenant_overrides (per casino/chain)\n2. tenant_defaults (per tenant/chain)  \n3. global_defaults (per chain)"
          }
        ],
        "functions": [],
        "imports": [
          "os",
          "typing",
          "logging",
          "pydantic",
          "dotenv",
          "supabase",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "supabase_integration",
          "screenshot_capture",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 270
      },
      {
        "name": "native_casino_research_tools",
        "path": "src/tools/native_casino_research_tools.py",
        "category": "tool",
        "size": 8653,
        "last_modified": "2025-08-23T23:38:26",
        "module_docstring": "\ud83d\udd27 Native LangChain Casino Research Tools\nPhase 1: Convert research functions to native @tool patterns\n\nUses official LangChain tool patterns:\n- @tool decorator for native tool creation\n- TavilySearchResults integration\n- WebBaseLoader integration  \n- PydanticOutputParser for structured extraction",
        "classes": [],
        "functions": [
          {
            "name": "search_casino_information",
            "line": 24,
            "docstring": "Search for general casino information using native TavilySearchResults.\n\nArgs:\n    casino_name: The name of the casino to research\n    \nReturns:\n    Formatted search results with titles, content, and URLs"
          },
          {
            "name": "load_casino_website_content",
            "line": 57,
            "docstring": "Load official casino website content using native WebBaseLoader.\n\nArgs:\n    casino_url: The official casino website URL\n    \nReturns:\n    Extracted website content with metadata"
          },
          {
            "name": "search_casino_reviews_and_ratings",
            "line": 91,
            "docstring": "Search for casino reviews and player ratings using native search.\n\nArgs:\n    casino_name: The casino name to search reviews for\n    \nReturns:\n    Aggregated review data from multiple sources"
          },
          {
            "name": "extract_casino_intelligence_data",
            "line": 130,
            "docstring": "Extract structured casino intelligence from research content using native PydanticOutputParser.\n\nArgs:\n    research_content: Raw research content to extract data from\n    \nReturns:\n    Structured casino intelligence data"
          },
          {
            "name": "research_casino_games_portfolio",
            "line": 176,
            "docstring": "Research specific casino games and software providers using native tools.\n\nArgs:\n    casino_name: Casino name to research games for\n    \nReturns:\n    Detailed games portfolio information  "
          },
          {
            "name": "research_casino_bonuses_and_promotions",
            "line": 208,
            "docstring": "Research casino bonuses and promotional offers using native search.\n\nArgs:\n    casino_name: Casino name to research bonuses for\n    \nReturns:\n    Comprehensive bonus and promotion information"
          }
        ],
        "imports": [
          "os",
          "typing",
          "langchain_core.prompts",
          "langchain_core.tools",
          "langchain_community.tools",
          "langchain_core.output_parsers",
          "langchain_openai",
          "langchain_community.document_loaders"
        ],
        "features": [
          "lcel_composition",
          "openai_api",
          "tavily_api",
          "research_functionality",
          "has_tests"
        ],
        "lines_of_code": 271
      },
      {
        "name": "placeholder_image_generator",
        "path": "src/tools/placeholder_image_generator.py",
        "category": "tool",
        "size": 3310,
        "last_modified": "2025-08-26T08:40:33.855011",
        "module_docstring": "\ud83d\uddbc\ufe0f Placeholder Image Generator Tool\n===================================\n\nProduction-ready tool for generating casino-themed placeholder images\nwhen real screenshot capture isn't available.",
        "classes": [
          {
            "name": "PlaceholderImageInput",
            "line": 19,
            "docstring": "Input schema for placeholder image tool"
          },
          {
            "name": "PlaceholderImageGenerator",
            "line": 24,
            "docstring": "\ud83d\uddbc\ufe0f Production placeholder image generator for casino reviews\n\nCreates professional casino-themed images when real capture isn't available"
          }
        ],
        "functions": [],
        "imports": [
          "os",
          "typing",
          "logging",
          "pydantic",
          "time",
          "langchain.tools"
        ],
        "features": [
          "screenshot_capture",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 89
      },
      {
        "name": "google_images_search_tool",
        "path": "src/tools/google_images_search_tool.py",
        "category": "tool",
        "size": 5634,
        "last_modified": "2025-08-25T14:21:38.359961",
        "module_docstring": "\ud83d\udd0d Google Images Search Tool - Claude.md Compliant\n================================================\n\nLangChain BaseTool for extracting casino image URLs from Google Images.\nMoves all HTTP logic into proper tool abstraction as required by Claude.md.\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "GoogleImagesSearchInput",
            "line": 26,
            "docstring": "Input schema for Google Images search tool"
          },
          {
            "name": "GoogleImagesSearchTool",
            "line": 31,
            "docstring": "\ud83c\udfb0 LangChain tool for extracting casino image URLs from Google Images\n\nClaude.md compliant tool that handles all HTTP operations for Google Images\nsearch and URL extraction. Used in LCEL chains via ToolNode."
          }
        ],
        "functions": [],
        "imports": [
          "re",
          "typing",
          "logging",
          "urllib.parse",
          "requests",
          "pydantic",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "async_support"
        ],
        "lines_of_code": 141
      },
      {
        "name": "supabase_research_tool",
        "path": "src/tools/supabase_research_tool.py",
        "category": "tool",
        "size": 10927,
        "last_modified": "2025-08-25T14:52:38.172942",
        "module_docstring": "\ud83d\udd0d Supabase Research Tool - Claude.md Compliant\n=============================================\n\nLangChain BaseTool for fetching casino research data from Supabase.\nRetrieves facts, sources, and SERP intent from research_articles and topic_clusters.\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "SupabaseResearchInput",
            "line": 24,
            "docstring": "Input schema for Supabase research tool"
          },
          {
            "name": "SupabaseResearchTool",
            "line": 31,
            "docstring": "\ud83d\udd0d LangChain tool for fetching casino research data from Supabase\n\nRetrieves comprehensive casino intelligence from:\n- research_articles: Normalized facts and source citations\n- topic_clusters: Primary/secondary keywords and SERP intent\n- secondary_keywords: Additional keyword suggestions"
          }
        ],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "datetime",
          "pydantic",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "supabase_integration",
          "research_functionality",
          "async_support"
        ],
        "lines_of_code": 278
      },
      {
        "name": "supabase_config_tool",
        "path": "src/tools/supabase_config_tool.py",
        "category": "tool",
        "size": 9942,
        "last_modified": "2025-08-25T14:52:00.937310",
        "module_docstring": "\ud83d\uddc3\ufe0f Supabase Configuration Tool - Claude.md Compliant\n==================================================\n\nLangChain BaseTool for fetching tenant configuration from Supabase.\nImplements config hierarchy: tenant_overrides > tenant_defaults > global_defaults\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "SupabaseConfigInput",
            "line": 24,
            "docstring": "Input schema for Supabase config tool"
          },
          {
            "name": "SupabaseConfigTool",
            "line": 31,
            "docstring": "\ud83d\uddc3\ufe0f LangChain tool for fetching merged tenant configuration from Supabase\n\nConfig hierarchy (highest precedence wins):\n1. tenant_overrides (per casino/chain)\n2. tenant_defaults (per tenant/chain)  \n3. global_defaults (per chain)"
          }
        ],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "json",
          "pydantic",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "supabase_integration",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support"
        ],
        "lines_of_code": 259
      },
      {
        "name": "wordpress_post_update_tool",
        "path": "src/tools/wordpress_post_update_tool.py",
        "category": "tool",
        "size": 7024,
        "last_modified": "2025-08-25T14:21:55.009012",
        "module_docstring": "\ud83d\udcdd WordPress Post Update Tool - Claude.md Compliant\n==================================================\n\nLangChain BaseTool for updating WordPress post content with uploaded images.\nHandles WordPress REST API post content updates.\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "WordPressPostUpdateInput",
            "line": 25,
            "docstring": "Input schema for WordPress post update tool"
          },
          {
            "name": "WordPressPostUpdateTool",
            "line": 33,
            "docstring": "\ud83d\udcdd LangChain tool for updating WordPress post content with images\n\nClaude.md compliant tool that handles all HTTP operations for WordPress\npost content updates. Used in LCEL chains via ToolNode."
          }
        ],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "base64",
          "requests",
          "pydantic",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "wordpress_api",
          "async_support"
        ],
        "lines_of_code": 172
      },
      {
        "name": "comprehensive_content_generator",
        "path": "src/tools/comprehensive_content_generator.py",
        "category": "tool",
        "size": 28916,
        "last_modified": "2025-08-25T21:48:42.152936",
        "module_docstring": "\u270d\ufe0f Comprehensive Content Generator\n=================================\n\nProfessional casino review content generator (2,500+ words)",
        "classes": [],
        "functions": [
          {
            "name": "generate_comprehensive_content",
            "line": 14,
            "docstring": "Generate comprehensive 2,500+ word casino review content"
          }
        ],
        "imports": [
          "typing",
          "logging"
        ],
        "features": [
          "publishing",
          "has_tests"
        ],
        "lines_of_code": 379
      },
      {
        "name": "wordpress_enhanced_publisher",
        "path": "src/tools/wordpress_enhanced_publisher.py",
        "category": "tool",
        "size": 21128,
        "last_modified": "2025-08-25T14:54:56.286386",
        "module_docstring": "\ud83c\udf10 Enhanced WordPress Publisher - Claude.md Compliant\n==================================================\n\nLangChain BaseTool for comprehensive WordPress publishing with:\n- RankMath SEO integration\n- ACF custom fields\n- Media management\n- Retry logic with observability\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "WordPressPublishInput",
            "line": 30,
            "docstring": "Input schema for enhanced WordPress publishing"
          },
          {
            "name": "WordPressEnhancedPublisher",
            "line": 43,
            "docstring": "\ud83c\udf10 Enhanced WordPress publisher with RankMath SEO and ACF support\n\nFeatures:\n- Complete post creation with media\n- RankMath SEO field integration\n- ACF custom field population\n- Retry logic with exponential backoff\n- Comprehensive error handling and logging"
          }
        ],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "json",
          "base64",
          "requests",
          "pydantic",
          "time",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "wordpress_api",
          "screenshot_capture",
          "publishing",
          "async_support"
        ],
        "lines_of_code": 526
      },
      {
        "name": "wordpress_media_tool",
        "path": "src/tools/wordpress_media_tool.py",
        "category": "tool",
        "size": 7059,
        "last_modified": "2025-08-25T14:21:49.389370",
        "module_docstring": "\ud83d\udce4 WordPress Media Upload Tool - Claude.md Compliant\n==================================================\n\nLangChain BaseTool for uploading images to WordPress media library.\nHandles WordPress REST API authentication and media management.\n\nClaude.md Compliance:\n\u2705 All external I/O via /src/tools/* adapters  \n\u2705 No ad-hoc HTTP inside chains\n\u2705 BaseTool implementation for LCEL integration",
        "classes": [
          {
            "name": "WordPressMediaUploadInput",
            "line": 26,
            "docstring": "Input schema for WordPress media upload tool"
          },
          {
            "name": "WordPressMediaUploadTool",
            "line": 33,
            "docstring": "\ud83d\udce4 LangChain tool for uploading images to WordPress media library\n\nClaude.md compliant tool that handles all HTTP operations for WordPress\nmedia uploads. Used in LCEL chains via ToolNode."
          }
        ],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "base64",
          "requests",
          "pydantic",
          "pathlib",
          "langchain.tools"
        ],
        "features": [
          "lcel_composition",
          "wordpress_api",
          "screenshot_capture",
          "async_support"
        ],
        "lines_of_code": 169
      }
    ],
    "integrations": [
      {
        "name": "bulletproof_image_integrator",
        "path": "src/integrations/bulletproof_image_integrator.py",
        "category": "integration",
        "size": 22293,
        "last_modified": "2025-06-21T11:19:10",
        "module_docstring": "\ud83d\udd27 BULLETPROOF IMAGE INTEGRATOR \nSolves the core issues: images found but not embedded, broken uploads, and poor HTML integration\n\nCRITICAL FIXES APPLIED:\n1. \u2705 V1-style simple Supabase uploads (no complex attribute checking)\n2. \u2705 Smart image embedding with context-aware placement\n3. \u2705 Proper HTML integration with responsive design\n4. \u2705 DataForSEO \u2192 Upload \u2192 Embed pipeline integration\n\nBased on V1 working patterns from fix_supabase_image_upload.py analysis",
        "classes": [
          {
            "name": "ImageEmbedConfig",
            "line": 30,
            "docstring": "Configuration for smart image embedding"
          },
          {
            "name": "BulletproofImageUploader",
            "line": 41,
            "docstring": "V1-style bulletproof image uploader with proper Supabase patterns\n\nCRITICAL: Uses V1's working patterns, not V6.0's broken attribute checking"
          },
          {
            "name": "SmartImageEmbedder",
            "line": 145,
            "docstring": "Smart image embedding with context-aware placement\n\nSolves the core issue: DataForSEO finds images but they're not used in final content"
          },
          {
            "name": "BulletproofImageIntegrator",
            "line": 345,
            "docstring": "Complete image integration pipeline: Download \u2192 Upload \u2192 Embed\n\nSOLVES THE CORE ISSUE: Images found by DataForSEO but not used in final content"
          }
        ],
        "functions": [
          {
            "name": "create_bulletproof_image_integrator",
            "line": 459,
            "docstring": "Create a bulletproof image integrator with smart embedding"
          },
          {
            "name": "embed_images_intelligently",
            "line": 155,
            "docstring": "Embed images into content with intelligent placement strategies\n\nCORE SOLUTION: Takes found images and actually embeds them in content"
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "PIL",
          "aiohttp",
          "asyncio",
          "datetime",
          "io",
          "dataclasses",
          "uuid",
          "bs4"
        ],
        "features": [
          "supabase_integration",
          "embeddings",
          "async_support"
        ],
        "lines_of_code": 569
      },
      {
        "name": "coinflip_mt_casino_publisher",
        "path": "src/integrations/coinflip_mt_casino_publisher.py",
        "category": "integration",
        "size": 20693,
        "last_modified": "2025-06-24T07:52:10",
        "module_docstring": "\ud83c\udfb0 COINFLIP MT CASINO PUBLISHER - Enhanced WordPress Integration\n=============================================================\n\nAdvanced publisher for Coinflip theme MT Casino custom post types.\nMaps 95-field casino intelligence to proper MT Casino structure.\n\nAuthor: AI Assistant\nCreated: 2025-01-23\nVersion: 1.0.0",
        "classes": [
          {
            "name": "MTCasinoPostType",
            "line": 43,
            "docstring": "MT Casino post type definitions"
          },
          {
            "name": "ContentTypeAnalyzer",
            "line": 98,
            "docstring": "Analyzes content to determine appropriate MT Casino post type"
          },
          {
            "name": "MTCasinoMetadataMapper",
            "line": 136,
            "docstring": "Maps 95-field casino intelligence to MT Casino custom fields"
          },
          {
            "name": "CoinflipMTCasinoPublisher",
            "line": 203,
            "docstring": "Enhanced publisher for Coinflip theme MT Casino integration"
          },
          {
            "name": "CoinflipMTCasinoIntegration",
            "line": 459,
            "docstring": "Main integration class for Coinflip MT Casino publishing"
          }
        ],
        "functions": [
          {
            "name": "create_coinflip_mt_casino_publisher",
            "line": 481,
            "docstring": "Factory function to create Coinflip MT Casino publisher"
          },
          {
            "name": "analyze_content_type",
            "line": 102,
            "docstring": "Analyze content to determine the best MT Casino post type\n\nReturns:\n    str: MT Casino post type ('mt_listing', 'mt_bonus', 'mt_slots', 'mt_reviews')"
          },
          {
            "name": "map_to_mt_listing",
            "line": 140,
            "docstring": "Map casino intelligence to mt_listing custom fields"
          },
          {
            "name": "map_to_mt_bonus",
            "line": 160,
            "docstring": "Map casino intelligence to mt_bonus custom fields"
          }
        ],
        "imports": [
          "re",
          "typing",
          "os",
          "logging",
          "json",
          "asyncio",
          "datetime",
          "urllib.parse",
          "wordpress_publisher",
          "sys",
          "dataclasses",
          "schemas.casino_intelligence_schema"
        ],
        "features": [
          "wordpress_api",
          "publishing",
          "async_support"
        ],
        "lines_of_code": 492
      },
      {
        "name": "fti_dataforseo_integration",
        "path": "src/integrations/fti_dataforseo_integration.py",
        "category": "integration",
        "size": 23,
        "last_modified": "2025-06-15T14:51:19",
        "module_docstring": null,
        "classes": [],
        "functions": [],
        "imports": [],
        "features": [],
        "lines_of_code": 1
      },
      {
        "name": "browserbase_screenshot_toolkit",
        "path": "src/integrations/browserbase_screenshot_toolkit.py",
        "category": "integration",
        "size": 15142,
        "last_modified": "2025-08-23T07:32:49",
        "module_docstring": "\ud83c\udf10 Browserbase Screenshot Toolkit Integration\n============================================\n\nLean replacement for the complex Playwright system using managed headless Chrome\nwith anti-bot hardening and native LangChain tools.\n\nKey Features:\n- Native LangChain tools for LCEL composition\n- Managed Chrome with anti-bot features\n- Zero infrastructure maintenance\n- JS-heavy site support (crucial for casinos)\n- Simple Supabase storage integration\n\nUsage in LCEL chains:\n```python\nfrom integrations.browserbase_screenshot_toolkit import create_casino_screenshot_chain\n\nscreenshot_chain = create_casino_screenshot_chain()\nfull_chain = research_chain | screenshot_chain | content_chain\n```",
        "classes": [
          {
            "name": "CasinoScreenshotConfig",
            "line": 62,
            "docstring": "Configuration for casino screenshot capture"
          },
          {
            "name": "CasinoScreenshotResult",
            "line": 72,
            "docstring": "Result from casino screenshot capture"
          },
          {
            "name": "BrowserbaseScreenshotToolkit",
            "line": 81,
            "docstring": "\ud83c\udf10 Lean Browserbase Screenshot Toolkit\n\nReplaces the complex 4,700-line Playwright system with managed Chrome\nand native LangChain tools for LCEL composition."
          }
        ],
        "functions": [
          {
            "name": "create_casino_screenshot_chain",
            "line": 326,
            "docstring": "\ud83c\udfd7\ufe0f Create LCEL chain for casino screenshot capture\n\nThis creates a native LangChain runnable that can be composed\nwith other chains using the | operator.\n\nUsage:\n```python\nscreenshot_chain = create_casino_screenshot_chain()\nfull_chain = research_chain | screenshot_chain | content_chain\n```"
          },
          {
            "name": "create_browserbase_tools_parallel",
            "line": 375,
            "docstring": "\ud83d\udd27 Create parallel Browserbase tools for complex casino interactions\n\nUseful for casinos that require navigation, clicking, or input\nbefore screenshot capture."
          }
        ],
        "imports": [
          "os",
          "typing",
          "utils.supabase_client",
          "logging",
          "langchain_core.runnables",
          "hashlib",
          "asyncio",
          "datetime",
          "base64",
          "pydantic",
          "langchain.schema.runnable",
          "langchain_community.tools.browserbase",
          "langchain.tools"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "supabase_integration",
          "screenshot_capture",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 426
      },
      {
        "name": "bulletproof_image_uploader_v1",
        "path": "src/integrations/bulletproof_image_uploader_v1.py",
        "category": "integration",
        "size": 14540,
        "last_modified": "2025-06-21T12:42:34",
        "module_docstring": "Bulletproof Image Uploader V1\nRobust image downloading and uploading with retry logic",
        "classes": [
          {
            "name": "WordPressCredentials",
            "line": 18,
            "docstring": "WordPress credentials for API access"
          },
          {
            "name": "BulletproofImageUploader",
            "line": 35,
            "docstring": "Bulletproof image uploader with retry logic"
          }
        ],
        "functions": [
          {
            "name": "create_wordpress_credentials_from_env",
            "line": 304,
            "docstring": "Create WordPress credentials from environment variables"
          },
          {
            "name": "create_bulletproof_uploader",
            "line": 315,
            "docstring": "Create bulletproof uploader from environment variables"
          },
          {
            "name": "optimize_image",
            "line": 65,
            "docstring": "Optimize image for web and WordPress compatibility"
          },
          {
            "name": "download_image_with_retry",
            "line": 109,
            "docstring": "Download image with retry logic - SYNCHRONOUS VERSION"
          },
          {
            "name": "upload_image_to_wordpress",
            "line": 166,
            "docstring": "Upload image to WordPress - SYNCHRONOUS VERSION"
          },
          {
            "name": "process_images_batch",
            "line": 246,
            "docstring": "Process a batch of images with bulletproof downloading and uploading"
          },
          {
            "name": "get_stats",
            "line": 282,
            "docstring": "Get upload statistics"
          },
          {
            "name": "reset_stats",
            "line": 296,
            "docstring": "Reset statistics"
          }
        ],
        "imports": [
          "os",
          "typing",
          "PIL",
          "aiofiles",
          "aiohttp",
          "asyncio",
          "io",
          "base64",
          "requests",
          "time"
        ],
        "features": [
          "wordpress_api",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 364
      },
      {
        "name": "wordpress_publishing_chain",
        "path": "src/integrations/wordpress_publishing_chain.py",
        "category": "integration",
        "size": 38191,
        "last_modified": "2025-08-24T21:46:02",
        "module_docstring": "\ud83d\udcdd WordPress Publishing Chain - PHASE 4\n=======================================\n\nComplete WordPress publishing integration for the Agentic Multi-Tenant RAG CMS:\n- Direct WordPress REST API integration with authentication\n- Visual content publishing to WordPress media library\n- SEO-optimized post creation with meta data\n- Multi-tenant WordPress site management\n- Integration with Phase 1+2+3 content generation pipeline\n\nAuthor: AI Assistant & TaskMaster System\nCreated: 2025-08-24\nTask: Phase 4 - WordPress Publishing Integration\nVersion: 1.0.0",
        "classes": [
          {
            "name": "WordPressCredentials",
            "line": 51,
            "docstring": "WordPress site credentials and configuration"
          },
          {
            "name": "WordPressMediaAsset",
            "line": 59,
            "docstring": "WordPress media asset information"
          },
          {
            "name": "WordPressSEOData",
            "line": 69,
            "docstring": "SEO metadata for WordPress posts"
          },
          {
            "name": "WordPressPost",
            "line": 80,
            "docstring": "WordPress post data"
          },
          {
            "name": "WordPressPublishingResult",
            "line": 93,
            "docstring": "Result from WordPress publishing operation"
          },
          {
            "name": "WordPressPublishingRequest",
            "line": 104,
            "docstring": "Request for WordPress publishing"
          },
          {
            "name": "WordPressAPIClient",
            "line": 117,
            "docstring": "WordPress REST API client with authentication and media handling"
          },
          {
            "name": "WordPressContentProcessor",
            "line": 283,
            "docstring": "Processes generated content for WordPress publishing"
          },
          {
            "name": "WordPressMediaHandler",
            "line": 469,
            "docstring": "Handles visual content upload to WordPress media library"
          },
          {
            "name": "WordPressPublishingChain",
            "line": 531,
            "docstring": "Complete WordPress publishing chain"
          }
        ],
        "functions": [
          {
            "name": "create_wordpress_publishing_chain",
            "line": 759,
            "docstring": "Factory function to create WordPress publishing chain"
          },
          {
            "name": "create_crashcasino_credentials",
            "line": 766,
            "docstring": "Create credentials for crashcasino.io"
          },
          {
            "name": "integrate_wordpress_publishing_with_enhanced_workflow",
            "line": 781,
            "docstring": "Integrate WordPress publishing with enhanced content generation workflow"
          },
          {
            "name": "create_phase4_wordpress_workflow",
            "line": 811,
            "docstring": "Create complete Phase 4 WordPress workflow integrating all phases"
          },
          {
            "name": "create_crashcasino_complete_workflow",
            "line": 843,
            "docstring": "Create complete workflow for crashcasino.io publishing"
          },
          {
            "name": "demo_wordpress_publishing",
            "line": 859,
            "docstring": "Demo WordPress publishing workflow"
          },
          {
            "name": "test_connection",
            "line": 139,
            "docstring": "Test WordPress API connection"
          },
          {
            "name": "upload_media",
            "line": 148,
            "docstring": "Upload media file to WordPress media library"
          },
          {
            "name": "create_post",
            "line": 208,
            "docstring": "Create WordPress post"
          },
          {
            "name": "process_content_for_wordpress",
            "line": 321,
            "docstring": "Process generated content into WordPress post format"
          },
          {
            "name": "upload_visual_assets",
            "line": 475,
            "docstring": "Upload visual assets to WordPress media library"
          },
          {
            "name": "publish_content",
            "line": 735,
            "docstring": "Publish content to WordPress"
          }
        ],
        "imports": [
          "re",
          "typing",
          "mimetypes",
          "logging",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "json",
          "hashlib",
          "datetime",
          "src.schemas.review_doc",
          "langchain_core.output_parsers",
          "base64",
          "requests",
          "pydantic",
          "pathlib",
          "src.workflows.enhanced_content_generation_workflow",
          "langchain_openai",
          "src.chains.visual_content_pipeline"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "openai_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 929
      },
      {
        "name": "enhanced_casino_wordpress_publisher",
        "path": "src/integrations/enhanced_casino_wordpress_publisher.py",
        "category": "integration",
        "size": 21539,
        "last_modified": "2025-06-20T09:31:29",
        "module_docstring": "\ud83c\udfb0 ENHANCED CASINO WORDPRESS PUBLISHER\n=====================================\n\nEnterprise-grade WordPress publishing system specifically designed for casino reviews\nusing the comprehensive 95-field casino intelligence data structure.\n\nThis module implements TASK 18: Enhanced WordPress Casino Publishing System\nIntegrates with:\n- Task 17.1: 95-Field Casino Intelligence Schema  \n- Existing WordPress REST API Publisher\n- LangChain components for content generation\n\nFeatures:\n- Converts 95-field casino intelligence to WordPress-compatible metadata\n- Generates SEO-optimized casino review content using LangChain\n- Manages crash casino site categorization and taxonomy\n- Enhanced HTML formatting with casino-specific structured content\n- LCEL workflows for complete publishing pipeline\n- Media asset management for casino images and branding\n\nAuthor: AI Assistant  \nCreated: 2025-01-20\nVersion: 1.0.0",
        "classes": [
          {
            "name": "CasinoReviewMetadata",
            "line": 69,
            "docstring": "WordPress-compatible metadata structure for casino reviews"
          },
          {
            "name": "CasinoIntelligenceDataConnector",
            "line": 190,
            "docstring": "SUBTASK 18.1: Casino Intelligence Data Connector\n\nConnects to, validates, and transforms the 95-field casino intelligence data \nfrom Task 17 for WordPress publishing."
          }
        ],
        "functions": [
          {
            "name": "to_wordpress_custom_fields",
            "line": 122,
            "docstring": "Convert metadata to WordPress custom fields format"
          },
          {
            "name": "validate_casino_intelligence",
            "line": 203,
            "docstring": "Validate casino intelligence data before processing\n\nArgs:\n    casino_data: CasinoIntelligence object to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_errors)"
          },
          {
            "name": "sanitize_casino_data",
            "line": 260,
            "docstring": "Sanitize casino data to prevent injection attacks and clean formatting\n\nArgs:\n    casino_data: Raw casino intelligence data\n    \nReturns:\n    Sanitized casino intelligence data"
          },
          {
            "name": "transform_to_wordpress_metadata",
            "line": 322,
            "docstring": "Transform 95-field casino intelligence to WordPress-compatible metadata\n\nArgs:\n    casino_data: Validated and sanitized casino intelligence\n    \nReturns:\n    CasinoReviewMetadata object ready for WordPress publishing"
          },
          {
            "name": "get_transformation_stats",
            "line": 481,
            "docstring": "Get statistics about the last transformation operation"
          },
          {
            "name": "get_validation_errors",
            "line": 485,
            "docstring": "Get validation errors from the last validation operation"
          },
          {
            "name": "sanitize_string",
            "line": 271,
            "docstring": "Sanitize individual string values"
          },
          {
            "name": "sanitize_list",
            "line": 287,
            "docstring": "Sanitize list of strings"
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "langchain.schema",
          "langchain.output_parsers",
          "langchain_core.runnables",
          "schemas.casino_intelligence_schema",
          "json",
          "asyncio",
          "datetime",
          "langchain_core.output_parsers",
          "langchain.prompts",
          "wordpress_publisher",
          "dataclasses",
          "pathlib",
          "langchain.chains"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "wordpress_api",
          "publishing"
        ],
        "lines_of_code": 487
      },
      {
        "name": "dataforseo_image_search",
        "path": "src/integrations/dataforseo_image_search.py",
        "category": "integration",
        "size": 36815,
        "last_modified": "2025-06-18T13:26:32",
        "module_docstring": "Enhanced DataForSEO Image Search Integration with LangChain\nProduction-ready implementation with advanced features\n\nFeatures:\n- Native DataForSEO API integration with rate limiting\n- Enhanced image processing with metadata extraction\n- Supabase integration for media asset storage\n- Batch processing capabilities (up to 100 tasks)\n- Intelligent caching system\n- Cost optimization through request batching\n- Production-ready error handling and retry mechanisms",
        "classes": [
          {
            "name": "DataForSEOConfig",
            "line": 57,
            "docstring": "Enhanced DataForSEO configuration with rate limiting"
          },
          {
            "name": "ImageSearchType",
            "line": 96,
            "docstring": "Image search types supported by DataForSEO"
          },
          {
            "name": "ImageSize",
            "line": 102,
            "docstring": "Image size filters"
          },
          {
            "name": "ImageType",
            "line": 109,
            "docstring": "Image type filters"
          },
          {
            "name": "ImageColor",
            "line": 116,
            "docstring": "Image color filters"
          },
          {
            "name": "ImageSearchRequest",
            "line": 122,
            "docstring": "Enhanced image search request model"
          },
          {
            "name": "ImageMetadata",
            "line": 145,
            "docstring": "Enhanced image metadata model"
          },
          {
            "name": "ImageSearchResult",
            "line": 170,
            "docstring": "Enhanced image search result model"
          },
          {
            "name": "RateLimiter",
            "line": 193,
            "docstring": "Advanced rate limiter for DataForSEO API compliance"
          },
          {
            "name": "ImageSearchCache",
            "line": 232,
            "docstring": "Intelligent caching system for image search results"
          },
          {
            "name": "EnhancedDataForSEOImageSearch",
            "line": 303,
            "docstring": "Enhanced DataForSEO Image Search Integration\n\nFeatures:\n- Rate-limited API requests with batch processing\n- Enhanced image metadata extraction\n- Supabase integration for asset storage\n- Intelligent caching system\n- Cost optimization and error handling"
          },
          {
            "name": "DataForSEOImageSearchTool",
            "line": 780,
            "docstring": "LangChain Tool wrapper for DataForSEO Image Search"
          }
        ],
        "functions": [
          {
            "name": "create_dataforseo_tool",
            "line": 869,
            "docstring": "Create a LangChain-compatible DataForSEO image search tool"
          },
          {
            "name": "create_dataforseo_image_search",
            "line": 891,
            "docstring": "Factory function to create DataForSEO image search instance\n\nArgs:\n    login: DataForSEO API login\n    password: DataForSEO API password\n    **kwargs: Additional configuration options\n\nReturns:\n    Configured EnhancedDataForSEOImageSearch instance"
          },
          {
            "name": "release",
            "line": 226,
            "docstring": "Release rate limit permission"
          },
          {
            "name": "get",
            "line": 259,
            "docstring": "Get cached result if available and not expired"
          },
          {
            "name": "set",
            "line": 284,
            "docstring": "Cache search result with LRU eviction"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "enum",
          "asyncio",
          "urllib.parse",
          "concurrent.futures",
          "langchain.tools",
          "io",
          "uuid",
          "langchain.callbacks.manager",
          "supabase",
          "json",
          "hashlib",
          "datetime",
          "base64",
          "requests",
          "dataclasses",
          "collections",
          "os",
          "PIL",
          "langchain.schema",
          "aiohttp",
          "pydantic",
          "time"
        ],
        "features": [
          "supabase_integration",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 975
      },
      {
        "name": "supabase_vector_store",
        "path": "src/integrations/supabase_vector_store.py",
        "category": "integration",
        "size": 21917,
        "last_modified": "2025-08-26T20:43:56.633209",
        "module_docstring": "\ud83c\udfb0 AGENTIC RAG CMS: SUPABASE VECTOR STORE WITH MMR & MULTI-TENANT\n================================================================\n\nEnhanced SupabaseVectorStore implementation for Agentic Multi-Tenant RAG CMS:\n- Maximal Marginal Relevance (MMR) search for diversity\n- Multi-tenant filtering with tenant_id, brand, locale\n- 95-field affiliate intelligence metadata support\n- Contextual retrieval with chunk context prepending\n- Native LangChain integration following official patterns\n\nAuthor: AI Assistant & TaskMaster System\nCreated: 2025-08-24\nTask: task-025 - Implement SupabaseVectorStore with MMR Search\nVersion: 1.0.0",
        "classes": [
          {
            "name": "EnhancedMultiQueryRetriever",
            "line": 47,
            "docstring": "Enhanced MultiQueryRetriever with better query generation for affiliate content"
          },
          {
            "name": "TenantMetadataFilter",
            "line": 100,
            "docstring": "Utility for creating tenant-aware metadata filters"
          },
          {
            "name": "AgenticSupabaseVectorStore",
            "line": 156,
            "docstring": "\ud83c\udfb0 ENHANCED SUPABASE VECTOR STORE FOR AGENTIC RAG CMS\n======================================================\n\nFeatures:\n- MMR (Maximal Marginal Relevance) search for result diversity\n- Multi-tenant filtering with tenant_id, brand, locale\n- 95-field affiliate intelligence metadata support\n- Contextual retrieval with chunk context prepending\n- Enhanced multi-query retrieval for comprehensive results"
          }
        ],
        "functions": [
          {
            "name": "create_agentic_supabase_store",
            "line": 450,
            "docstring": "Create configured AgenticSupabaseVectorStore instance"
          },
          {
            "name": "setup_supabase_schema",
            "line": 465,
            "docstring": "Setup Supabase schema for agentic vector store"
          },
          {
            "name": "from_llm_with_tenant_context",
            "line": 51,
            "docstring": "Create MultiQueryRetriever with tenant-aware query generation"
          },
          {
            "name": "create_tenant_filter",
            "line": 104,
            "docstring": "Create metadata filter for tenant-specific retrieval"
          },
          {
            "name": "create_affiliate_intelligence_filter",
            "line": 130,
            "docstring": "Create filter for affiliate intelligence fields"
          },
          {
            "name": "add_casino_intelligence_documents",
            "line": 204,
            "docstring": "Add casino intelligence documents with full 95-field metadata"
          },
          {
            "name": "create_mmr_retriever",
            "line": 305,
            "docstring": "Create MMR retriever for diverse results"
          },
          {
            "name": "create_tenant_aware_retriever",
            "line": 325,
            "docstring": "Create retriever with tenant-specific filtering"
          },
          {
            "name": "create_enhanced_multi_query_retriever",
            "line": 356,
            "docstring": "Create enhanced multi-query retriever with tenant context"
          },
          {
            "name": "similarity_search_with_tenant_filter",
            "line": 376,
            "docstring": "Perform similarity search with tenant filtering"
          },
          {
            "name": "mmr_search_with_tenant_filter",
            "line": 398,
            "docstring": "Perform MMR search with tenant filtering for diverse results"
          },
          {
            "name": "get_casino_intelligence_by_name",
            "line": 424,
            "docstring": "Retrieve specific casino intelligence by name"
          }
        ],
        "imports": [
          "os",
          "typing",
          "logging",
          "langchain_core.documents",
          "langchain_core.prompts",
          "supabase.client",
          "langchain_community.vectorstores",
          "langchain_core.callbacks",
          "langchain.retrievers",
          "langchain_core.output_parsers",
          "langchain_core.retrievers",
          "schemas.review_doc",
          "pydantic",
          "schemas.casino_intelligence_schema",
          "langchain_openai",
          "numpy",
          "langchain_core.vectorstores"
        ],
        "features": [
          "lcel_composition",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "research_functionality",
          "has_tests"
        ],
        "lines_of_code": 584
      },
      {
        "name": "wordpress_chain_integration",
        "path": "src/integrations/wordpress_chain_integration.py",
        "category": "integration",
        "size": 12866,
        "last_modified": "2025-08-23T12:32:51",
        "module_docstring": "\ud83c\udfd7\ufe0f NATIVE LANGCHAIN WordPress Chain Integration\nProper Runnable chain integration with WordPress tool",
        "classes": [
          {
            "name": "WordPressChainIntegration",
            "line": 26,
            "docstring": "\ud83c\udfd7\ufe0f Native LangChain WordPress Chain Integration"
          }
        ],
        "functions": [
          {
            "name": "create_wordpress_publishing_chain",
            "line": 273,
            "docstring": "Factory function to create WordPress publishing chain"
          },
          {
            "name": "create_simple_wordpress_chain",
            "line": 283,
            "docstring": "Factory function to create simple WordPress publishing chain"
          },
          {
            "name": "create_wordpress_publishing_chain",
            "line": 34,
            "docstring": "Create a complete WordPress publishing chain using proper LangChain patterns"
          },
          {
            "name": "create_simple_publish_chain",
            "line": 239,
            "docstring": "Create a simple publishing chain for direct content"
          },
          {
            "name": "create_content_enhancement_chain",
            "line": 244,
            "docstring": "Create a chain that enhances content before publishing"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "langchain_wordpress_tool",
          "asyncio",
          "langchain_core.tools",
          "langchain_core.output_parsers",
          "traceback",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "openai_api",
          "wordpress_api",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 359
      },
      {
        "name": "screenshot_web_research_integration",
        "path": "src/integrations/screenshot_web_research_integration.py",
        "category": "integration",
        "size": 21895,
        "last_modified": "2025-06-25T09:40:30",
        "module_docstring": "Screenshot Web Research Integration\nIntegrates Playwright screenshot functionality with the web research pipeline\n\nThis module provides:\n1. URL Target Identification System - identifies URLs that need screenshots\n2. Priority Scoring for screenshot targets\n3. Queue system for managing screenshot requests\n4. Integration with existing web research pipeline",
        "classes": [
          {
            "name": "ScreenshotTargetType",
            "line": 38,
            "docstring": "Types of screenshot targets for web research"
          },
          {
            "name": "ScreenshotTarget",
            "line": 48,
            "docstring": "Represents a URL target for screenshot capture"
          },
          {
            "name": "URLTargetIdentifier",
            "line": 65,
            "docstring": "System for identifying and prioritizing URLs that require screenshot evidence\nduring web research operations."
          },
          {
            "name": "ScreenshotRequestQueue",
            "line": 327,
            "docstring": "Queue system for managing screenshot requests during web research operations\nHandles prioritization, deduplication, and request lifecycle management"
          }
        ],
        "functions": [
          {
            "name": "create_url_target_identifier",
            "line": 490,
            "docstring": "Factory function to create URL target identifier"
          },
          {
            "name": "create_screenshot_request_queue",
            "line": 494,
            "docstring": "Factory function to create screenshot request queue"
          },
          {
            "name": "identify_screenshot_targets",
            "line": 109,
            "docstring": "Identify URLs from web research results that need screenshots\n\nArgs:\n    web_results: List of web research results\n    original_query: Original research query for context\n    \nReturns:\n    List of ScreenshotTarget objects, sorted by priority"
          },
          {
            "name": "get_high_priority_targets",
            "line": 316,
            "docstring": "Get screenshot targets above priority threshold"
          },
          {
            "name": "clear_processed_urls",
            "line": 321,
            "docstring": "Clear the processed URLs cache"
          },
          {
            "name": "add_targets",
            "line": 353,
            "docstring": "Add screenshot targets to the queue\n\nArgs:\n    targets: List of ScreenshotTarget objects\n    \nReturns:\n    Number of targets actually added (excluding duplicates)"
          },
          {
            "name": "add_request",
            "line": 381,
            "docstring": "Add a single screenshot target to the queue\n\nArgs:\n    target: ScreenshotTarget object to add\n    \nReturns:\n    Request ID for tracking"
          },
          {
            "name": "get_next_target",
            "line": 409,
            "docstring": "Get the next highest priority target from the queue"
          },
          {
            "name": "get_request",
            "line": 417,
            "docstring": "Get a specific target by request ID\n\nArgs:\n    request_id: Request ID to look for\n    \nReturns:\n    ScreenshotTarget if found, None otherwise"
          },
          {
            "name": "complete_request",
            "line": 431,
            "docstring": "Mark a request as completed\n\nArgs:\n    request_id: Request ID to mark as completed"
          },
          {
            "name": "mark_completed",
            "line": 443,
            "docstring": "Mark a target as completed with its result"
          },
          {
            "name": "mark_failed",
            "line": 449,
            "docstring": "Mark a target as failed"
          },
          {
            "name": "get_queue_stats",
            "line": 464,
            "docstring": "Get queue statistics"
          },
          {
            "name": "is_empty",
            "line": 475,
            "docstring": "Check if queue is empty"
          },
          {
            "name": "clear",
            "line": 479,
            "docstring": "Clear the queue and reset state"
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "enum",
          "asyncio",
          "playwright_screenshot_engine",
          "urllib.parse",
          "dataclasses",
          "uuid",
          "time",
          "heapq"
        ],
        "features": [
          "lcel_composition",
          "screenshot_capture",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 550
      },
      {
        "name": "enhanced_coinflip_wordpress_publisher",
        "path": "src/integrations/enhanced_coinflip_wordpress_publisher.py",
        "category": "integration",
        "size": 1,
        "last_modified": "2025-06-22T09:41:41",
        "module_docstring": null,
        "classes": [],
        "functions": [],
        "imports": [],
        "features": [],
        "lines_of_code": 1
      },
      {
        "name": "playwright_screenshot_engine",
        "path": "src/integrations/playwright_screenshot_engine.py",
        "category": "integration",
        "size": 194989,
        "last_modified": "2025-06-26T16:43:07",
        "module_docstring": "Native Playwright Screenshot Engine for Universal RAG CMS\nImplements browser pool management and screenshot capture using pure Playwright APIs\n\n\u2705 NATIVE PLAYWRIGHT IMPLEMENTATION\n- Direct playwright.async_api usage\n- No LangChain wrapper dependencies\n- Pure Playwright browser automation\n- Integrates with existing Universal RAG architecture\n\n\u2705 TASK 22.2 BROWSER RESOURCE OPTIMIZATION\n- Intelligent browser resource allocation\n- Screenshot caching for repeated requests  \n- Optimized image compression settings\n- Performance monitoring and resource cleanup",
        "classes": [
          {
            "name": "ResourceOptimizationConfig",
            "line": 48,
            "docstring": "Configuration for browser resource optimization (Task 22.2)"
          },
          {
            "name": "ScreenshotCacheEntry",
            "line": 95,
            "docstring": "Represents a cached screenshot entry (Task 22.2)"
          },
          {
            "name": "ScreenshotCache",
            "line": 116,
            "docstring": "Intelligent caching system for screenshot operations (Task 22.2)\nImplements LRU eviction with TTL and content-aware caching"
          },
          {
            "name": "ImageCompressionOptimizer",
            "line": 267,
            "docstring": "Intelligent image compression optimizer (Task 22.2)\nAnalyzes screenshot data and optimizes compression settings"
          },
          {
            "name": "BrowserProfile",
            "line": 332,
            "docstring": "Browser profile configuration for stealth and variety"
          },
          {
            "name": "BrowserInstance",
            "line": 372,
            "docstring": "Represents a managed browser instance in the pool"
          },
          {
            "name": "BrowserPoolManager",
            "line": 386,
            "docstring": "Native Playwright browser pool management system with Task 22.2 optimizations\nEfficiently manages browser instances for screenshot capture\n\n\u2705 TASK 22.2 FEATURES:\n- Resource-aware browser pool sizing\n- Optimized browser launch options\n- Memory usage monitoring\n- Performance metrics tracking"
          },
          {
            "name": "ScreenshotConfig",
            "line": 763,
            "docstring": "Configuration for screenshot capture"
          },
          {
            "name": "ScreenshotResult",
            "line": 774,
            "docstring": "Result from screenshot capture operation"
          },
          {
            "name": "ScreenshotService",
            "line": 785,
            "docstring": "Core screenshot capture service using native Playwright APIs with Task 22.2 optimizations\nIntegrates with BrowserPoolManager for efficient resource usage\n\n\u2705 TASK 22.2 FEATURES:\n- Screenshot caching for repeated requests\n- Intelligent image compression optimization\n- Performance monitoring and metrics\n- Resource-aware capture settings"
          },
          {
            "name": "CasinoElement",
            "line": 1169,
            "docstring": "Represents a casino page element with targeting information"
          },
          {
            "name": "CasinoElementLocator",
            "line": 1177,
            "docstring": "Casino-specific element targeting system for screenshots\nUses heuristic algorithms to identify common casino page elements"
          },
          {
            "name": "ScreenshotPriority",
            "line": 1533,
            "docstring": "Priority levels for screenshot requests."
          },
          {
            "name": "ScreenshotRequest",
            "line": 1541,
            "docstring": "Represents a screenshot request in the queue."
          },
          {
            "name": "QueueStatus",
            "line": 1563,
            "docstring": "Status information for the screenshot queue."
          },
          {
            "name": "ScreenshotQueue",
            "line": 1572,
            "docstring": "Asynchronous screenshot queue system for handling multiple concurrent requests.\n\nFeatures:\n- Priority-based request processing\n- Configurable concurrency limits\n- Request timeout and cancellation\n- Progress monitoring and status updates\n- Dynamic waiting strategies for lazy-loaded content\n- Integration with browser pool for resource management"
          },
          {
            "name": "ScreenshotQueueManager",
            "line": 1967,
            "docstring": "High-level interface for managing screenshot queues.\nProvides simplified methods for common screenshot operations."
          },
          {
            "name": "ScreenshotErrorType",
            "line": 2309,
            "docstring": "Types of screenshot errors for structured error handling"
          },
          {
            "name": "ScreenshotError",
            "line": 2322,
            "docstring": "Structured error information for screenshot operations"
          },
          {
            "name": "CircuitBreakerState",
            "line": 2346,
            "docstring": "Circuit breaker states for failure handling"
          },
          {
            "name": "CircuitBreakerConfig",
            "line": 2353,
            "docstring": "Configuration for circuit breaker behavior"
          },
          {
            "name": "CircuitBreaker",
            "line": 2359,
            "docstring": "Circuit breaker pattern for handling persistent failures"
          },
          {
            "name": "RetryConfig",
            "line": 2415,
            "docstring": "Configuration for retry behavior"
          },
          {
            "name": "ScreenshotQualityValidator",
            "line": 2448,
            "docstring": "Validates screenshot quality and detects corruption"
          },
          {
            "name": "ErrorHandlingService",
            "line": 2498,
            "docstring": "Comprehensive error handling and resilience service for screenshot operations\nProvides structured error handling, retry logic, and circuit breaker patterns"
          },
          {
            "name": "ResilientScreenshotService",
            "line": 2788,
            "docstring": "ScreenshotService enhanced with comprehensive error handling"
          },
          {
            "name": "SupabaseConfig",
            "line": 2938,
            "docstring": "Configuration for Supabase integration"
          },
          {
            "name": "StorageResult",
            "line": 2948,
            "docstring": "Result from Supabase storage operation"
          },
          {
            "name": "MetadataResult",
            "line": 2958,
            "docstring": "Result from Supabase metadata operation"
          },
          {
            "name": "SupabaseScreenshotStorage",
            "line": 2966,
            "docstring": "Supabase integration for screenshot storage and metadata management\nHandles file uploads to Supabase Storage and metadata to PostgreSQL"
          },
          {
            "name": "IntegratedScreenshotService",
            "line": 3389,
            "docstring": "Integrated screenshot service that combines capture with Supabase storage\nProvides high-level interface for screenshot capture and storage"
          },
          {
            "name": "StealthLevel",
            "line": 3643,
            "docstring": "Stealth levels for anti-detection system"
          },
          {
            "name": "StealthProfile",
            "line": 3651,
            "docstring": "Comprehensive stealth profile configuration"
          },
          {
            "name": "StealthConfig",
            "line": 3831,
            "docstring": "Configuration for stealth operations"
          },
          {
            "name": "StealthResult",
            "line": 3843,
            "docstring": "Result from stealth operation"
          },
          {
            "name": "AntiDetectionStealthSystem",
            "line": 3853,
            "docstring": "Comprehensive anti-detection stealth system for casino site access\nImplements graduated 4-level stealth approach with ethical boundaries"
          },
          {
            "name": "StealthScreenshotService",
            "line": 4335,
            "docstring": "Screenshot service with integrated anti-detection stealth system\nProvides high-level interface for stealth screenshot capture"
          },
          {
            "name": "ImageCompressionOptimizer",
            "line": 4715,
            "docstring": "Intelligent image compression optimization\nAutomatically selects optimal format and compression settings"
          }
        ],
        "functions": [
          {
            "name": "optimize_browser_resources",
            "line": 4569,
            "docstring": "Optimize browser resource usage by implementing intelligent pooling\nand resource allocation strategies.\n\nArgs:\n    browser_pool: Existing browser pool to optimize (optional)\n    config: Resource optimization configuration\n    \nReturns:\n    Dictionary with optimization results and browser configuration"
          },
          {
            "name": "get_global_screenshot_cache",
            "line": 4683,
            "docstring": "Get or create global screenshot cache instance"
          },
          {
            "name": "get_global_screenshot_cache",
            "line": 4700,
            "docstring": "Get or create global screenshot cache instance"
          },
          {
            "name": "get_performance_config",
            "line": 73,
            "docstring": "Get configuration optimized for performance over quality"
          },
          {
            "name": "get_quality_config",
            "line": 84,
            "docstring": "Get configuration optimized for quality over performance"
          },
          {
            "name": "is_expired",
            "line": 107,
            "docstring": "Check if cache entry has expired"
          },
          {
            "name": "update_access",
            "line": 111,
            "docstring": "Update access tracking"
          },
          {
            "name": "get_stats",
            "line": 244,
            "docstring": "Get cache performance statistics"
          },
          {
            "name": "optimize_compression_settings",
            "line": 274,
            "docstring": "Analyze screenshot and determine optimal compression settings\n\nArgs:\n    screenshot_data: Original screenshot bytes\n    target_format: Desired format ('png' or 'jpeg')\n    optimization_config: Configuration for optimization\n    \nReturns:\n    Dictionary with optimization recommendations"
          },
          {
            "name": "get_random_profile",
            "line": 341,
            "docstring": "Generate a random realistic browser profile"
          },
          {
            "name": "mark_used",
            "line": 381,
            "docstring": "Mark browser as recently used"
          },
          {
            "name": "get_resource_stats",
            "line": 697,
            "docstring": "Get detailed resource usage statistics (Task 22.2)"
          },
          {
            "name": "get_capture_stats",
            "line": 1103,
            "docstring": "Get detailed capture performance statistics (Task 22.2)"
          },
          {
            "name": "to_dict",
            "line": 2333,
            "docstring": "Convert error to dictionary for logging/storage"
          },
          {
            "name": "can_execute",
            "line": 2370,
            "docstring": "Check if request can be executed based on circuit state"
          },
          {
            "name": "record_success",
            "line": 2391,
            "docstring": "Record successful operation"
          },
          {
            "name": "record_failure",
            "line": 2402,
            "docstring": "Record failed operation"
          },
          {
            "name": "get_delay",
            "line": 2432,
            "docstring": "Calculate delay for retry attempt with exponential backoff"
          },
          {
            "name": "validate_screenshot",
            "line": 2452,
            "docstring": "Validate screenshot quality and detect potential issues\n\nArgs:\n    screenshot_data: Screenshot binary data\n    expected_min_size: Minimum expected file size in bytes\n    \nReturns:\n    Dict with validation results"
          },
          {
            "name": "get_circuit_breaker",
            "line": 2517,
            "docstring": "Get or create circuit breaker for a specific domain"
          },
          {
            "name": "classify_error",
            "line": 2523,
            "docstring": "Classify exception into structured error type\n\nArgs:\n    exception: The exception that occurred\n    url: URL being processed when error occurred\n    \nReturns:\n    ScreenshotError with classified error information"
          },
          {
            "name": "is_retryable_error",
            "line": 2588,
            "docstring": "Determine if an error should be retried"
          },
          {
            "name": "get_error_summary",
            "line": 2704,
            "docstring": "Get summary of errors from the last N hours\n\nArgs:\n    hours: Number of hours to look back\n    \nReturns:\n    Dict with error statistics and trends"
          },
          {
            "name": "reset_circuit_breaker",
            "line": 2757,
            "docstring": "Reset circuit breaker(s) - useful for manual recovery"
          },
          {
            "name": "generate_stealth_profile",
            "line": 3676,
            "docstring": "Generate a stealth profile based on the specified level"
          },
          {
            "name": "get_stealth_analytics",
            "line": 4292,
            "docstring": "Get analytics about stealth system performance"
          },
          {
            "name": "reset_domain_configuration",
            "line": 4320,
            "docstring": "Reset stealth configuration for a domain or all domains"
          },
          {
            "name": "get_stealth_analytics",
            "line": 4446,
            "docstring": "Get stealth system analytics"
          },
          {
            "name": "reset_stealth_configuration",
            "line": 4450,
            "docstring": "Reset stealth configuration"
          },
          {
            "name": "optimize_compression_settings",
            "line": 4722,
            "docstring": "Optimize compression settings based on image content and target usage\n\nArgs:\n    screenshot_data: Raw screenshot data\n    target_format: Target format ('png', 'jpeg')\n    optimization_config: Optimization configuration\n    \nReturns:\n    Optimized compression settings"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "random",
          "enum",
          "asyncio",
          "urllib.parse",
          "playwright.async_api",
          "traceback",
          "uuid",
          "supabase",
          "hashlib",
          "json",
          "datetime",
          "base64",
          "dataclasses",
          "heapq",
          "contextlib",
          "os",
          "pathlib",
          "psutil",
          "time"
        ],
        "features": [
          "supabase_integration",
          "screenshot_capture",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 4769
      },
      {
        "name": "wordpress_publisher",
        "path": "src/integrations/wordpress_publisher.py",
        "category": "integration",
        "size": 96904,
        "last_modified": "2025-08-23T12:21:40",
        "module_docstring": "WordPress REST API Publisher for Universal RAG CMS\nEnterprise-grade WordPress integration with advanced features\n\nThis module provides comprehensive WordPress publishing capabilities including:\n- Multi-authentication support (Application Passwords, JWT, OAuth2)\n- Bulletproof image processing with retry mechanisms\n- Rich HTML formatting and responsive design\n- Smart contextual image embedding\n- Comprehensive error recovery\n- Integration with Tasks 1 & 5 (Supabase + DataForSEO)",
        "classes": [
          {
            "name": "WordPressConfig",
            "line": 49,
            "docstring": "WordPress configuration with environment-driven defaults"
          },
          {
            "name": "WordPressAuthManager",
            "line": 83,
            "docstring": "Multi-authentication manager for WordPress REST API"
          },
          {
            "name": "BulletproofImageProcessor",
            "line": 152,
            "docstring": "Advanced image processing with retry mechanisms and optimization"
          },
          {
            "name": "RichHTMLFormatter",
            "line": 266,
            "docstring": "Advanced HTML formatting with responsive design and SEO optimization"
          },
          {
            "name": "ErrorRecoveryManager",
            "line": 403,
            "docstring": "Enterprise-grade error handling and recovery"
          },
          {
            "name": "WordPressRESTPublisher",
            "line": 475,
            "docstring": "Main WordPress publisher with enterprise features"
          },
          {
            "name": "WordPressIntegration",
            "line": 1601,
            "docstring": "\ud83c\udfd7\ufe0f NATIVE LANGCHAIN: High-level WordPress integration facade with 95-field casino intelligence"
          },
          {
            "name": "FallbackMetadata",
            "line": 1081,
            "docstring": null
          },
          {
            "name": "CasinoWordPressMetadata",
            "line": 992,
            "docstring": "\ud83c\udfd7\ufe0f NATIVE LANGCHAIN: WordPress metadata schema for casino content"
          }
        ],
        "functions": [
          {
            "name": "create_wordpress_integration",
            "line": 1972,
            "docstring": "Create WordPress integration with environment defaults"
          },
          {
            "name": "headers",
            "line": 127,
            "docstring": "Get authentication headers"
          },
          {
            "name": "auth_method",
            "line": 132,
            "docstring": "Get current authentication method"
          },
          {
            "name": "format_content",
            "line": 272,
            "docstring": "Format content with rich HTML structure"
          },
          {
            "name": "circuit_breaker",
            "line": 430,
            "docstring": "Circuit breaker decorator for operations"
          },
          {
            "name": "get_stats",
            "line": 1197,
            "docstring": "Get performance statistics"
          },
          {
            "name": "get_performance_stats",
            "line": 1733,
            "docstring": "Get comprehensive performance statistics"
          },
          {
            "name": "decorator",
            "line": 432,
            "docstring": null
          }
        ],
        "imports": [
          "typing",
          "logging",
          "asyncio",
          "playwright_screenshot_engine",
          "urllib.parse",
          "markdown",
          "langchain_openai",
          "langchain_core.prompts",
          "traceback",
          "io",
          "uuid",
          "supabase",
          "mimetypes",
          "langchain_core.runnables",
          "json",
          "datetime",
          "langchain_core.output_parsers",
          "base64",
          "dataclasses",
          "schemas.casino_intelligence_schema",
          "browser_pool_manager",
          "os",
          "re",
          "PIL",
          "aiohttp",
          "pydantic",
          "pathlib",
          "bs4",
          "time"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "embeddings",
          "openai_api",
          "wordpress_api",
          "screenshot_capture",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 2130
      },
      {
        "name": "langchain_wordpress_tool",
        "path": "src/integrations/langchain_wordpress_tool.py",
        "category": "integration",
        "size": 45186,
        "last_modified": "2025-08-23T13:07:36",
        "module_docstring": "\ud83c\udfd7\ufe0f NATIVE LANGCHAIN WordPress Publishing Tool\nProper BaseTool implementation following LangChain patterns",
        "classes": [
          {
            "name": "WordPressPostSchema",
            "line": 29,
            "docstring": "\ud83c\udfd7\ufe0f Pydantic schema for WordPress post data"
          },
          {
            "name": "CasinoReviewSchema",
            "line": 40,
            "docstring": "\ud83c\udfb0 Specialized schema for casino review posts"
          },
          {
            "name": "WordPressPublishingTool",
            "line": 59,
            "docstring": "\ud83c\udfd7\ufe0f Native LangChain WordPress Publishing Tool"
          }
        ],
        "functions": [
          {
            "name": "create_wordpress_tool",
            "line": 946,
            "docstring": "Create WordPress publishing tool with configuration"
          },
          {
            "name": "get_wordpress_prompt_template",
            "line": 953,
            "docstring": "Get prompt template for WordPress content generation"
          }
        ],
        "imports": [
          "os",
          "re",
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.callbacks",
          "json",
          "asyncio",
          "datetime",
          "aiohttp",
          "urllib.parse",
          "base64",
          "langchain_core.tools",
          "langchain_core.output_parsers",
          "markdown",
          "pydantic"
        ],
        "features": [
          "lcel_composition",
          "embeddings",
          "wordpress_api",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 972
      },
      {
        "name": "coinflip_wordpress_publisher",
        "path": "src/integrations/coinflip_wordpress_publisher.py",
        "category": "integration",
        "size": 38871,
        "last_modified": "2025-08-22T21:23:10",
        "module_docstring": "\ud83c\udfb0 COINFLIP MT CASINO PUBLISHER - Enhanced WordPress Integration\n=============================================================\n\nAdvanced publisher for Coinflip theme MT Casino custom post types.\nMaps 95-field casino intelligence to proper MT Casino structure.\n\nFEATURES:\n- Intelligent content type detection (casino, bonus, slot, review)\n- Multi-post strategy (main + related posts)\n- Rich MT Casino metadata mapping\n- Taxonomy management (categories, software, payments)\n- Graceful fallback to regular posts\n- Integration with existing WordPress REST API\n\nAuthor: AI Assistant\nCreated: 2025-01-23\nVersion: 1.0.0",
        "classes": [
          {
            "name": "MTCasinoPostType",
            "line": 46,
            "docstring": "MT Casino post type definitions"
          },
          {
            "name": "ContentTypeAnalyzer",
            "line": 101,
            "docstring": "Analyzes content to determine appropriate MT Casino post type"
          },
          {
            "name": "MTCasinoMetadataMapper",
            "line": 139,
            "docstring": "Maps 95-field casino intelligence to MT Casino custom fields"
          },
          {
            "name": "MTCasinoTaxonomyManager",
            "line": 303,
            "docstring": "Manages MT Casino taxonomies and categories"
          },
          {
            "name": "CoinflipMTCasinoPublisher",
            "line": 394,
            "docstring": "Enhanced publisher for Coinflip theme MT Casino integration"
          },
          {
            "name": "CoinflipMTCasinoIntegration",
            "line": 814,
            "docstring": "Main integration class for Coinflip MT Casino publishing"
          }
        ],
        "functions": [
          {
            "name": "create_coinflip_mt_casino_publisher",
            "line": 855,
            "docstring": "Factory function to create Coinflip MT Casino publisher\n\nArgs:\n    site_url: WordPress site URL\n    username: WordPress username\n    application_password: WordPress application password\n\nReturns:\n    CoinflipMTCasinoIntegration instance ready for publishing"
          },
          {
            "name": "analyze_content_type",
            "line": 105,
            "docstring": "Analyze content to determine the best MT Casino post type\n\nReturns:\n    str: MT Casino post type ('mt_listing', 'mt_bonus', 'mt_slots', 'mt_reviews')"
          },
          {
            "name": "map_to_mt_listing",
            "line": 143,
            "docstring": "Map casino intelligence to mt_listing custom fields"
          },
          {
            "name": "map_to_mt_bonus",
            "line": 163,
            "docstring": "Map casino intelligence to mt_bonus custom fields"
          },
          {
            "name": "map_to_mt_slots",
            "line": 179,
            "docstring": "Map casino intelligence to mt_slots custom fields"
          },
          {
            "name": "map_to_mt_reviews",
            "line": 193,
            "docstring": "Map casino intelligence to mt_reviews custom fields"
          },
          {
            "name": "determine_categories",
            "line": 307,
            "docstring": "Determine appropriate categories based on casino data and post type"
          },
          {
            "name": "determine_software_tags",
            "line": 344,
            "docstring": "Determine software provider tags"
          },
          {
            "name": "determine_payment_tags",
            "line": 368,
            "docstring": "Determine payment method tags"
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "integrations.wordpress_publisher",
          "json",
          "asyncio",
          "datetime",
          "wordpress_publisher",
          "dataclasses",
          "schemas.casino_intelligence_schema"
        ],
        "features": [
          "wordpress_api",
          "publishing",
          "async_support"
        ],
        "lines_of_code": 908
      }
    ],
    "chains": [
      {
        "name": "native_universal_rag_lcel",
        "path": "src/chains/native_universal_rag_lcel.py",
        "category": "chain",
        "size": 83280,
        "last_modified": "2025-08-22T20:38:39",
        "module_docstring": "Native LangChain Universal RAG Chain Implementation\n==================================================\n\nA complete Universal RAG chain built exclusively with native LangChain components:\n- Uses only LangChain built-in retrievers, chains, and memory\n- Implements LCEL (LangChain Expression Language) patterns with | operator\n- Leverages native VectorStore implementations\n- Uses built-in RetrievalQA and ConversationalRetrievalChain patterns\n- Follows LangChain best practices and design patterns\n\nAuthor: AI Assistant\nCreated: 2025-01-22\nVersion: 2.0.0 (Native LangChain Implementation)",
        "classes": [
          {
            "name": "NativeUniversalRAGChain",
            "line": 104,
            "docstring": "Universal RAG Chain built exclusively with native LangChain components.\n\nFeatures:\n- Native retrieval with MultiQueryRetriever, ContextualCompressionRetriever\n- LCEL chains with | operator for data flow\n- Built-in conversation memory with ConversationBufferMemory\n- Native caching with RedisSemanticCache\n- Ensemble retrieval combining multiple retrievers\n- Self-querying capabilities with SelfQueryRetriever"
          },
          {
            "name": "CasinoIntelligence",
            "line": 94,
            "docstring": null
          }
        ],
        "functions": [
          {
            "name": "create_native_universal_rag_chain",
            "line": 1647,
            "docstring": "Create a native LangChain Universal RAG chain with specified configuration.\n\nArgs:\n    model_name: LLM model to use\n    temperature: Temperature for LLM \n    vector_store_type: Type of vector store (\"faiss\", \"chroma\", \"redis\", \"supabase\")\n    enable_caching: Enable Redis semantic caching\n    enable_memory: Enable conversation memory\n    enable_web_search: Enable Tavily web search\n    **kwargs: Additional arguments for LLM initialization\n\nReturns:\n    Configured NativeUniversalRAGChain instance"
          },
          {
            "name": "create_native_retrieval_qa_chain",
            "line": 1683,
            "docstring": "Create a simple native RetrievalQA chain for basic RAG functionality.\n\nThis is a more straightforward implementation using LangChain's built-in RetrievalQA."
          },
          {
            "name": "create_native_conversational_chain",
            "line": 1727,
            "docstring": "Create a native ConversationalRetrievalChain for conversational RAG.\n\nThis maintains conversation history and context across interactions."
          },
          {
            "name": "invoke",
            "line": 555,
            "docstring": "Invoke the chain with a query"
          },
          {
            "name": "stream",
            "line": 589,
            "docstring": "Stream the chain response"
          },
          {
            "name": "add_documents",
            "line": 599,
            "docstring": "Add documents to the vector store"
          },
          {
            "name": "similarity_search",
            "line": 607,
            "docstring": "Perform similarity search on vector store"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.documents",
          "langchain_core.callbacks",
          "asyncio",
          "langchain.memory",
          "langchain_core.chat_history",
          "dotenv",
          "langchain_openai",
          "langchain.chains.summarize",
          "langchain_redis.cache",
          "langchain_community.document_loaders",
          "langchain_core.prompts",
          "langchain_core.messages",
          "langchain.retrievers.multi_vector",
          "langchain.retrievers.self_query.base",
          "supabase",
          "langchain_core.runnables.history",
          "langchain_core.runnables",
          "langchain_community.vectorstores",
          "langchain.retrievers.document_compressors",
          "json",
          "datetime",
          "langchain_core.output_parsers",
          "langchain_community.vectorstores.supabase",
          "langchain.retrievers",
          "langchain_text_splitters",
          "base64",
          "requests",
          "langchain.chains",
          "schemas.casino_intelligence_schema",
          "langchain_community.tools.tavily_search",
          "os",
          "langchain.chains.retrieval_qa.base",
          "langchain_redis",
          "pydantic",
          "pathlib",
          "langchain_community.retrievers",
          "langchain_core.globals"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "wordpress_api",
          "tavily_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 1814
      },
      {
        "name": "narrative_generation_lcel",
        "path": "src/chains/narrative_generation_lcel.py",
        "category": "chain",
        "size": 17180,
        "last_modified": "2025-08-24T13:54:18",
        "module_docstring": "\ud83c\udfaf Narrative Generation LCEL Chain\nTask-012: World-class narrative-style content generation with retrieval integration\n\nFeatures:\n- LCEL chain with {context}, {visuals}, {affiliate_meta} retrieval\n- Multi-locale prompt template loading from /src/prompts/review_narrative_{locale}.txt\n- Integration with Multi-Tenant Retrieval System (Stream 1D)\n- Visual content and affiliate metadata integration\n- ReviewDoc output generation with QA validation hooks",
        "classes": [
          {
            "name": "NarrativeGenerationInput",
            "line": 43,
            "docstring": "Input schema for narrative generation chain"
          },
          {
            "name": "NarrativeGenerationOutput",
            "line": 53,
            "docstring": "Output schema for narrative generation chain"
          },
          {
            "name": "NarrativePromptLoader",
            "line": 61,
            "docstring": "Loads and manages narrative prompt templates by locale"
          },
          {
            "name": "VisualContentProcessor",
            "line": 98,
            "docstring": "Processes and formats visual content for narrative generation"
          },
          {
            "name": "AffiliateMetadataProcessor",
            "line": 130,
            "docstring": "Processes affiliate-specific metadata for narrative generation"
          },
          {
            "name": "NarrativeGenerationChain",
            "line": 159,
            "docstring": "LCEL chain for generating world-class narrative content with retrieval integration"
          }
        ],
        "functions": [
          {
            "name": "create_narrative_generation_chain",
            "line": 394,
            "docstring": "Create a narrative generation chain with specified parameters\n\nArgs:\n    retrieval_system: Multi-tenant retrieval system\n    llm_model: LLM model name\n    temperature: Generation temperature\n    \nReturns:\n    Configured narrative generation chain"
          },
          {
            "name": "load_prompt_template",
            "line": 70,
            "docstring": "Load prompt template for specific locale"
          },
          {
            "name": "get_available_locales",
            "line": 89,
            "docstring": "Get list of available locale templates"
          },
          {
            "name": "format_visual_context",
            "line": 102,
            "docstring": "Format visual assets into context string"
          },
          {
            "name": "extract_visual_metadata",
            "line": 119,
            "docstring": "Extract metadata from visual assets for context"
          },
          {
            "name": "format_affiliate_context",
            "line": 134,
            "docstring": "Format affiliate metadata into context string"
          },
          {
            "name": "generate_narrative",
            "line": 364,
            "docstring": "Generate narrative content using the LCEL chain\n\nArgs:\n    input_data: Complete input specification\n    \nReturns:\n    Generated narrative with structured output"
          },
          {
            "name": "get_available_locales",
            "line": 388,
            "docstring": "Get available prompt locales"
          },
          {
            "name": "prepare_retrieval_query",
            "line": 185,
            "docstring": "Convert input to retrieval query"
          },
          {
            "name": "perform_retrieval",
            "line": 197,
            "docstring": "Execute multi-tenant retrieval"
          },
          {
            "name": "process_metadata",
            "line": 202,
            "docstring": "Process visual and affiliate metadata"
          },
          {
            "name": "create_generation_prompt",
            "line": 214,
            "docstring": "Create prompt with retrieved context"
          },
          {
            "name": "generate_content",
            "line": 256,
            "docstring": "Generate the narrative content"
          },
          {
            "name": "create_review_doc",
            "line": 286,
            "docstring": "Create structured ReviewDoc from generated content"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.documents",
          "langchain_core.runnables",
          "src.chains.multi_tenant_retrieval_system",
          "src.schemas.casino_intelligence_schema",
          "src.schemas.review_doc",
          "datetime",
          "langchain_core.output_parsers",
          "pydantic",
          "pathlib",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "openai_api",
          "screenshot_capture",
          "research_functionality"
        ],
        "lines_of_code": 419
      },
      {
        "name": "native_casino_rag_chain",
        "path": "src/chains/native_casino_rag_chain.py",
        "category": "chain",
        "size": 11252,
        "last_modified": "2025-08-23T23:39:47",
        "module_docstring": "\ud83d\udd17 Native LangChain Casino RAG Chain\nPhase 1: Pure LCEL chain with native SelfQueryRetriever integration\n\nUses official LangChain patterns:\n- Native LCEL chain composition (retriever | prompt | model | parser)\n- SelfQueryRetriever for 95-field casino intelligence\n- ChatPromptTemplate for prompts\n- RunnablePassthrough for data flow",
        "classes": [
          {
            "name": "NativeCasinoRAGChain",
            "line": 21,
            "docstring": "Native LangChain RAG chain using SelfQueryRetriever and LCEL"
          }
        ],
        "functions": [
          {
            "name": "add_casino_intelligence_data",
            "line": 161,
            "docstring": "Add casino intelligence to native vectorstore"
          },
          {
            "name": "generate_casino_review_sync",
            "line": 176,
            "docstring": "Synchronous version for easier integration"
          },
          {
            "name": "query_casino_intelligence_directly",
            "line": 184,
            "docstring": "Direct access to native SelfQueryRetriever for testing"
          }
        ],
        "imports": [
          "typing",
          "langchain_core.documents",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "asyncio",
          "langchain_core.output_parsers",
          "langchain_openai",
          "chains.native_casino_retriever"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "vector_store",
          "openai_api",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 259
      },
      {
        "name": "simple_rag_chain",
        "path": "src/chains/simple_rag_chain.py",
        "category": "chain",
        "size": 13003,
        "last_modified": "2025-08-23T23:25:52",
        "module_docstring": "\ud83d\ude80 Simple Native LangChain RAG Chain\nFollowing LangChain best practices: retriever | prompt | model | parser\n\nReplaces 6,000+ line complex implementation with ~100 lines of native patterns.",
        "classes": [
          {
            "name": "SimpleRAGChain",
            "line": 20,
            "docstring": "Simple RAG chain following native LangChain patterns"
          }
        ],
        "functions": [
          {
            "name": "create_enhanced_chain",
            "line": 85,
            "docstring": "Create enhanced chain with 95-field data and images using ONLY native LangChain"
          },
          {
            "name": "add_documents",
            "line": 266,
            "docstring": "Add documents to vectorstore (simple pattern)"
          },
          {
            "name": "search_casino",
            "line": 173,
            "docstring": null
          },
          {
            "name": "load_web_content",
            "line": 187,
            "docstring": null
          },
          {
            "name": "extract_95_fields",
            "line": 207,
            "docstring": null
          },
          {
            "name": "get_casino_images",
            "line": 235,
            "docstring": null
          }
        ],
        "imports": [
          "os",
          "typing",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "langchain_community.vectorstores",
          "src.schemas.casino_intelligence_schema",
          "asyncio",
          "langchain_core.output_parsers",
          "langchain_text_splitters",
          "langchain_community.tools",
          "supabase",
          "langchain_openai",
          "langchain_community.document_loaders"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "tavily_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 315
      },
      {
        "name": "comprehensive_research_chain",
        "path": "src/chains/comprehensive_research_chain.py",
        "category": "chain",
        "size": 18062,
        "last_modified": "2025-06-17T12:14:02",
        "module_docstring": "Comprehensive Research Chain - Native LangChain Implementation\nExtracts 95+ structured fields using RunnableParallel pattern from v1, integrated with v2 architecture\n\n\u2705 NATIVE LANGCHAIN PATTERNS:\n- RunnableParallel for 8-category concurrent extraction\n- Structured outputs with Pydantic models\n- RunnableLambda for merging and transformation\n- Composable with existing v2 chains\n\n\u2705 INTEGRATION POINTS:\n- Enhanced FTI Pipeline: .pipe(comprehensive_research_chain)\n- Contextual Retrieval: Enhanced document processing\n- Confidence Scoring: Research quality assessment\n- Supabase Storage: Structured data persistence\n\n\ud83c\udfaf USAGE: research_data | comprehensive_research_chain \u2192 95+ structured fields",
        "classes": [
          {
            "name": "TrustworthinessData",
            "line": 44,
            "docstring": "Trustworthiness category - 15 fields"
          },
          {
            "name": "GamesData",
            "line": 62,
            "docstring": "Games category - 12 fields"
          },
          {
            "name": "BonusData",
            "line": 77,
            "docstring": "Bonuses category - 12 fields"
          },
          {
            "name": "PaymentData",
            "line": 92,
            "docstring": "Payments category - 15 fields"
          },
          {
            "name": "UserExperienceData",
            "line": 110,
            "docstring": "User Experience category - 12 fields"
          },
          {
            "name": "InnovationsData",
            "line": 125,
            "docstring": "Innovations category - 8 fields"
          },
          {
            "name": "ComplianceData",
            "line": 136,
            "docstring": "Compliance category - 10 fields"
          },
          {
            "name": "AssessmentData",
            "line": 149,
            "docstring": "Assessment category - 11 fields"
          },
          {
            "name": "ComprehensiveResearchData",
            "line": 163,
            "docstring": "Complete 95+ field research data model"
          },
          {
            "name": "ComprehensiveResearchEnhancer",
            "line": 324,
            "docstring": "Helper for integrating with v2 systems"
          }
        ],
        "functions": [
          {
            "name": "create_category_extraction_prompts",
            "line": 182,
            "docstring": "Create structured prompts for each category"
          },
          {
            "name": "create_parallel_extraction_chain",
            "line": 228,
            "docstring": "Create parallel extraction chain for categories"
          },
          {
            "name": "merge_category_results",
            "line": 252,
            "docstring": "Merge category extraction results"
          },
          {
            "name": "create_comprehensive_research_chain",
            "line": 280,
            "docstring": "Create comprehensive research extraction chain using native LangChain patterns\n\nArgs:\n    retriever: Any LangChain retriever\n    llm: Language model\n\nReturns:\n    RunnableSequence: Composable chain for field extraction"
          },
          {
            "name": "enhance_fti_pipeline",
            "line": 328,
            "docstring": "Add comprehensive research to FTI Pipeline"
          },
          {
            "name": "create_quality_assessor",
            "line": 334,
            "docstring": "Create quality assessment component"
          },
          {
            "name": "assess_quality",
            "line": 337,
            "docstring": null
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "langchain.chains.retrieval",
          "langchain.chains.combine_documents",
          "langchain_community.vectorstores",
          "asyncio",
          "datetime",
          "langchain_core.output_parsers",
          "pydantic",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 382
      },
      {
        "name": "enhanced_confidence_scoring_system",
        "path": "src/chains/enhanced_confidence_scoring_system.py",
        "category": "chain",
        "size": 173551,
        "last_modified": "2025-06-26T09:53:43",
        "module_docstring": "Enhanced Response and Confidence Scoring System\n\nThis module provides advanced multi-factor confidence calculation, intelligent caching,\nand comprehensive quality assessment for RAG applications.\n\nKey Features:\n- 6-factor confidence scoring with adaptive weights\n- Advanced source quality assessment with 8 quality indicators\n- Intelligent caching with query-pattern learning\n- Response validation with content quality checks\n- Enhanced error recovery with confidence-based fallbacks\n- Real-time performance monitoring and optimization",
        "classes": [
          {
            "name": "SourceQualityTier",
            "line": 57,
            "docstring": "Source quality classification tiers"
          },
          {
            "name": "ResponseQualityLevel",
            "line": 67,
            "docstring": "Response quality classification levels"
          },
          {
            "name": "CacheStrategy",
            "line": 77,
            "docstring": "Advanced caching strategies"
          },
          {
            "name": "ConfidenceFactorType",
            "line": 85,
            "docstring": "Types of confidence factors for categorization"
          },
          {
            "name": "EnhancedRAGResponse",
            "line": 94,
            "docstring": "Enhanced RAG response with advanced confidence and quality metrics"
          },
          {
            "name": "ConfidenceFactors",
            "line": 204,
            "docstring": "Comprehensive confidence factors for multi-dimensional assessment"
          },
          {
            "name": "CacheEntry",
            "line": 305,
            "docstring": "Enhanced cache entry with metadata and quality tracking"
          },
          {
            "name": "SystemConfiguration",
            "line": 349,
            "docstring": "Configuration for the enhanced confidence scoring system"
          },
          {
            "name": "SourceQualityAnalyzer",
            "line": 442,
            "docstring": "Comprehensive source quality analyzer with 8 quality indicators\n\nEvaluates sources across multiple dimensions:\n- Authority: Official status, licensing, regulation\n- Credibility: Verification, reviews, trust signals\n- Expertise: Professional knowledge, specialization\n- Recency: Freshness, currency, updates\n- Detail: Completeness, thoroughness, depth\n- Objectivity: Neutrality, bias assessment\n- Transparency: Disclosure, openness, clarity\n- Citation: References, sources, evidence"
          },
          {
            "name": "PerformanceTracker",
            "line": 1070,
            "docstring": "Track performance metrics for the enhanced system"
          },
          {
            "name": "IntelligentCache",
            "line": 1135,
            "docstring": "Advanced intelligent caching system with learning capabilities\n\nFeatures:\n- 4 caching strategies: Conservative, Balanced, Aggressive, Adaptive\n- Query pattern recognition and classification\n- Adaptive TTL optimization based on performance history\n- Quality-based cache admission control\n- Performance learning algorithms\n- Real-time analytics and monitoring"
          },
          {
            "name": "ValidationSeverity",
            "line": 1845,
            "docstring": "Severity levels for validation issues."
          },
          {
            "name": "ValidationCategory",
            "line": 1853,
            "docstring": "Categories of validation checks."
          },
          {
            "name": "ValidationIssue",
            "line": 1863,
            "docstring": "Represents a validation issue with detailed context."
          },
          {
            "name": "ValidationMetrics",
            "line": 1875,
            "docstring": "Comprehensive validation metrics."
          },
          {
            "name": "ResponseValidator",
            "line": 1885,
            "docstring": "Comprehensive response validation system for Universal RAG CMS.\n\nFeatures:\n- Multi-dimensional quality assessment\n- Pattern-based format validation\n- Content relevance and coherence analysis\n- Source utilization validation\n- Performance-optimized processing\n- Detailed improvement suggestions"
          },
          {
            "name": "ValidationIntegrator",
            "line": 2430,
            "docstring": "Helper class to integrate validation results with existing response models."
          },
          {
            "name": "ConfidenceBreakdown",
            "line": 2516,
            "docstring": "Detailed breakdown of confidence scoring with comprehensive metrics."
          },
          {
            "name": "EnhancedConfidenceCalculator",
            "line": 2539,
            "docstring": "Main orchestrator for enhanced confidence scoring system.\n\nIntegrates all completed components:\n- Source Quality Analyzer (subtask 2.12-2.13)\n- Intelligent Cache System (subtask 2.14)\n- Response Validation Framework (subtask 2.15)\n\nProvides:\n- Multi-factor confidence calculation\n- Query-type aware processing\n- Quality-based caching decisions\n- Comprehensive response enhancement"
          },
          {
            "name": "ConfidenceIntegrator",
            "line": 3267,
            "docstring": "Helper class to integrate confidence calculation with Universal RAG Chain."
          },
          {
            "name": "EnhancedSourceMetadata",
            "line": 3309,
            "docstring": "Enhanced source metadata with visual indicators and quality scores."
          },
          {
            "name": "EnhancedSourceMetadataGenerator",
            "line": 3343,
            "docstring": "Generate enhanced source metadata with visual indicators."
          },
          {
            "name": "UniversalRAGEnhancementSystem",
            "line": 3663,
            "docstring": "Global orchestrator for the Universal RAG CMS Enhancement System.\n\nIntegrates all components:\n- Enhanced Confidence Scoring\n- Source Quality Analysis\n- Intelligent Caching\n- Response Validation\n- Performance Monitoring"
          }
        ],
        "functions": [
          {
            "name": "calculate_quality_tier",
            "line": 406,
            "docstring": "Calculate quality tier from numeric score"
          },
          {
            "name": "generate_query_hash",
            "line": 422,
            "docstring": "Generate consistent hash for query caching"
          },
          {
            "name": "normalize_score",
            "line": 436,
            "docstring": "Normalize score to specified range"
          },
          {
            "name": "setup_enhanced_logging",
            "line": 1808,
            "docstring": "Setup enhanced logging for the confidence scoring system"
          },
          {
            "name": "create_universal_rag_enhancement_system",
            "line": 3977,
            "docstring": "Factory function to create a fully configured Universal RAG Enhancement System.\n\nArgs:\n    config: Optional configuration dictionary\n    \nReturns:\n    Configured UniversalRAGEnhancementSystem instance"
          },
          {
            "name": "get_confidence_factors_template",
            "line": 4053,
            "docstring": "Get a template ConfidenceFactors object with default values."
          },
          {
            "name": "calculate_simple_confidence",
            "line": 4058,
            "docstring": "Calculate a simple confidence score using default weights.\n\nArgs:\n    content_quality: Content quality score (0.0-1.0)\n    source_quality: Source quality score (0.0-1.0)\n    query_matching: Query matching score (0.0-1.0)\n    technical_factors: Technical factors score (0.0-1.0)\n    \nReturns:\n    Weighted confidence score (0.0-1.0)"
          },
          {
            "name": "enrich_sources_with_task23_metadata",
            "line": 4089,
            "docstring": "Enhance sources with Task 2.3 specific metadata and enrichments.\n\nArgs:\n    sources: List of source dictionaries\n    query_type: Type of query being processed\n    query: Original query string\n\nReturns:\n    Enhanced sources with additional metadata"
          },
          {
            "name": "validate_confidence_score",
            "line": 179,
            "docstring": "Ensure confidence score is within valid range"
          },
          {
            "name": "set_quality_level_from_confidence",
            "line": 184,
            "docstring": "Automatically set quality level based on confidence score if not provided"
          },
          {
            "name": "get_weighted_score",
            "line": 227,
            "docstring": "Calculate weighted confidence score"
          },
          {
            "name": "get_factor_breakdown",
            "line": 254,
            "docstring": "Get detailed breakdown of all factors"
          },
          {
            "name": "validate_factors",
            "line": 279,
            "docstring": "Validate all factors are within acceptable ranges"
          },
          {
            "name": "is_expired",
            "line": 319,
            "docstring": "Check if cache entry has expired"
          },
          {
            "name": "is_stale",
            "line": 323,
            "docstring": "Check if cache entry is stale based on age"
          },
          {
            "name": "update_access",
            "line": 328,
            "docstring": "Update access tracking"
          },
          {
            "name": "get_cache_value_score",
            "line": 333,
            "docstring": "Calculate cache value score based on quality, access frequency, and age"
          },
          {
            "name": "validate_configuration",
            "line": 383,
            "docstring": "Validate configuration settings"
          },
          {
            "name": "record_request",
            "line": 1086,
            "docstring": "Record metrics for a request"
          },
          {
            "name": "get_cache_hit_rate",
            "line": 1111,
            "docstring": "Calculate cache hit rate"
          },
          {
            "name": "get_performance_summary",
            "line": 1118,
            "docstring": "Get comprehensive performance summary"
          },
          {
            "name": "get_performance_metrics",
            "line": 1642,
            "docstring": "Get comprehensive cache performance metrics"
          },
          {
            "name": "get_cache_info",
            "line": 1778,
            "docstring": "Get detailed cache information for debugging"
          },
          {
            "name": "get_validation_summary",
            "line": 2397,
            "docstring": "Generate a human-readable validation summary."
          },
          {
            "name": "update_rag_response",
            "line": 2434,
            "docstring": "Update EnhancedRAGResponse with validation results."
          },
          {
            "name": "get_confidence_summary",
            "line": 3243,
            "docstring": "Generate human-readable confidence summary."
          },
          {
            "name": "get_system_status",
            "line": 3926,
            "docstring": "Get comprehensive system status."
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.documents",
          "langchain_core.callbacks",
          "random",
          "enum",
          "asyncio",
          "langchain_openai",
          "langchain_core.prompts",
          "langchain_anthropic",
          "statistics",
          "advanced_prompt_system",
          "langchain_core.runnables",
          "hashlib",
          "json",
          "datetime",
          "langchain_core.output_parsers",
          "dataclasses",
          "collections",
          "re",
          "math",
          "pydantic",
          "time"
        ],
        "features": [
          "langchain_runnable",
          "prompt_templates",
          "embeddings",
          "openai_api",
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 4252
      },
      {
        "name": "native_casino_retriever",
        "path": "src/chains/native_casino_retriever.py",
        "category": "chain",
        "size": 13766,
        "last_modified": "2025-08-23T23:37:51",
        "module_docstring": "\ud83d\udd0d Native LangChain SelfQueryRetriever for 95-Field Casino Intelligence\nPhase 1: Pure native components - no custom logic\n\nUses official LangChain patterns:\n- SupabaseVectorStore \n- SelfQueryRetriever with casino metadata schema\n- AttributeInfo for all 95 fields",
        "classes": [
          {
            "name": "NativeCasinoRetriever",
            "line": 21,
            "docstring": "Native LangChain casino intelligence retriever using SelfQueryRetriever"
          }
        ],
        "functions": [
          {
            "name": "add_casino_intelligence",
            "line": 235,
            "docstring": "Add casino intelligence documents using native patterns"
          },
          {
            "name": "query_casino_intelligence",
            "line": 300,
            "docstring": "Query casino intelligence using native SelfQueryRetriever"
          },
          {
            "name": "get_native_retriever",
            "line": 315,
            "docstring": "Return the native SelfQueryRetriever for LCEL chains"
          }
        ],
        "imports": [
          "os",
          "typing",
          "langchain_core.documents",
          "supabase.client",
          "langchain_community.vectorstores",
          "langchain.chains.query_constructor.schema",
          "langchain.retrievers.self_query.base",
          "langchain_openai"
        ],
        "features": [
          "lcel_composition",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "research_functionality",
          "has_tests"
        ],
        "lines_of_code": 351
      },
      {
        "name": "native_supabase_rag",
        "path": "src/chains/native_supabase_rag.py",
        "category": "chain",
        "size": 9592,
        "last_modified": "2025-08-23T23:29:07",
        "module_docstring": "\ud83d\ude80 Native LangChain Supabase RAG Chain\nFollowing official LangChain documentation patterns exactly\n\nUses native SupabaseVectorStore + SelfQueryRetriever + LCEL chains",
        "classes": [
          {
            "name": "NativeSupabaseRAGChain",
            "line": 21,
            "docstring": "Native LangChain Supabase integration following official patterns"
          }
        ],
        "functions": [
          {
            "name": "add_casino_documents",
            "line": 115,
            "docstring": "Add casino documents using native LangChain pattern"
          },
          {
            "name": "create_native_rag_chain",
            "line": 145,
            "docstring": "Create RAG chain using native LangChain patterns"
          },
          {
            "name": "query_casino_intelligence",
            "line": 210,
            "docstring": "Query casino intelligence using native SelfQueryRetriever"
          }
        ],
        "imports": [
          "os",
          "typing",
          "langchain_core.documents",
          "langchain_core.prompts",
          "supabase.client",
          "langchain_community.vectorstores",
          "langchain_core.runnables",
          "langchain.chains.query_constructor.schema",
          "asyncio",
          "langchain_core.output_parsers",
          "langchain.retrievers.self_query.base",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 259
      },
      {
        "name": "multi_tenant_retrieval_system",
        "path": "src/chains/multi_tenant_retrieval_system.py",
        "category": "chain",
        "size": 20746,
        "last_modified": "2025-08-24T13:39:13",
        "module_docstring": "\ud83c\udfaf Multi-Tenant Retrieval System\nTask-010: LCEL retrieval chains with tenant_id, voice, locale parameters\n\nFeatures:\n- Multi-tenant metadata filtering with tenant_id, voice, locale\n- Enhanced recall with MultiQueryRetriever\n- LCEL chain composition for scalable retrieval\n- Integration with AgenticSupabaseVectorStore (Stream 1B)\n- Support for Research & Ingestion Agent content (Stream 1C)",
        "classes": [
          {
            "name": "MultiTenantQuery",
            "line": 40,
            "docstring": "Multi-tenant query with filtering parameters"
          },
          {
            "name": "RetrievalResult",
            "line": 52,
            "docstring": "Structured retrieval result with metadata"
          },
          {
            "name": "MultiTenantRetriever",
            "line": 60,
            "docstring": "Custom multi-tenant retriever with metadata filtering\nIntegrates with AgenticSupabaseVectorStore for tenant-aware retrieval"
          },
          {
            "name": "MultiTenantRetrievalSystem",
            "line": 152,
            "docstring": "\ud83c\udfaf MULTI-TENANT RETRIEVAL SYSTEM\n================================\n\nLCEL-based retrieval system with comprehensive multi-tenant support:\n- Tenant-aware metadata filtering\n- Enhanced recall with MultiQueryRetriever\n- Voice and locale personalization\n- Content type filtering\n- Integration with AgenticSupabaseVectorStore"
          }
        ],
        "functions": [
          {
            "name": "vector_store",
            "line": 90,
            "docstring": null
          },
          {
            "name": "tenant_config",
            "line": 94,
            "docstring": null
          },
          {
            "name": "search_type",
            "line": 98,
            "docstring": null
          },
          {
            "name": "search_kwargs",
            "line": 102,
            "docstring": null
          },
          {
            "name": "metadata_filter",
            "line": 106,
            "docstring": null
          },
          {
            "name": "create_retrieval_chain",
            "line": 362,
            "docstring": "Create complete LCEL retrieval chain with result structuring\n\nArgs:\n    retrieval_type: \"single\", \"multi_query\", or \"ensemble\""
          },
          {
            "name": "retrieve_with_tenant_filter",
            "line": 187,
            "docstring": "Retrieve documents with tenant filtering applied"
          },
          {
            "name": "create_multi_query_retriever",
            "line": 249,
            "docstring": "Create and execute multi-query retrieval"
          },
          {
            "name": "ensemble_retrieve",
            "line": 306,
            "docstring": "Ensemble retrieval combining multiple methods"
          },
          {
            "name": "structure_results",
            "line": 382,
            "docstring": "Structure retrieval results with metadata"
          }
        ],
        "imports": [
          "typing",
          "langchain_core.documents",
          "langchain_core.prompts",
          "logging",
          "langchain_core.runnables",
          "langchain_core.callbacks",
          "src.schemas.casino_intelligence_schema",
          "src.schemas.review_doc",
          "langchain.retrievers",
          "langchain_core.output_parsers",
          "langchain_core.retrievers",
          "datetime",
          "asyncio",
          "unittest.mock",
          "src.integrations.supabase_vector_store",
          "pydantic",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "openai_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 548
      },
      {
        "name": "brand_voice_chain",
        "path": "src/chains/brand_voice_chain.py",
        "category": "chain",
        "size": 21761,
        "last_modified": "2025-06-17T12:14:27",
        "module_docstring": "Brand Voice Management Chain - Native LangChain Implementation\nApplies consistent brand voice across content using native LangChain patterns\n\n\u2705 NATIVE LANGCHAIN PATTERNS:\n- RunnablePassthrough for voice configuration flow\n- RunnableLambda for voice adaptation logic\n- RunnableBranch for voice type selection\n- Composable with existing content generation chains\n\n\ud83c\udfaf USAGE: content_data | brand_voice_chain \u2192 voice-adapted content",
        "classes": [
          {
            "name": "BrandVoiceConfig",
            "line": 33,
            "docstring": "Brand voice configuration"
          },
          {
            "name": "VoiceAdaptedContent",
            "line": 47,
            "docstring": "Content adapted with brand voice"
          },
          {
            "name": "BrandVoiceEnhancer",
            "line": 401,
            "docstring": "Helper for integrating brand voice with v2 systems"
          }
        ],
        "functions": [
          {
            "name": "create_voice_selector",
            "line": 137,
            "docstring": "Select appropriate brand voice based on content type and context"
          },
          {
            "name": "create_voice_adaptation_prompt",
            "line": 196,
            "docstring": "Create prompt for voice adaptation"
          },
          {
            "name": "create_voice_adapter",
            "line": 232,
            "docstring": "Create voice adaptation function"
          },
          {
            "name": "create_voice_validator",
            "line": 311,
            "docstring": "Create voice validation function"
          },
          {
            "name": "create_brand_voice_chain",
            "line": 341,
            "docstring": "Create brand voice management chain using native LangChain patterns\n\n\u2705 NATIVE LANGCHAIN COMPONENTS:\n- RunnablePassthrough for voice configuration flow\n- RunnableBranch for voice type selection\n- RunnableLambda for voice adaptation and validation\n- Structured outputs with Pydantic models\n\nArgs:\n    llm: Language model for voice adaptation\n\nReturns:\n    RunnableSequence: Composable chain for brand voice application\n    \nUsage:\n    content_data | brand_voice_chain \u2192 voice-adapted content"
          },
          {
            "name": "is_expert_content",
            "line": 140,
            "docstring": "Check if content requires expert voice"
          },
          {
            "name": "is_casual_content",
            "line": 148,
            "docstring": "Check if content should use casual voice"
          },
          {
            "name": "is_news_content",
            "line": 156,
            "docstring": "Check if content is news/analysis"
          },
          {
            "name": "adapt_content_voice",
            "line": 238,
            "docstring": "Adapt content to match brand voice"
          },
          {
            "name": "validate_voice_adaptation",
            "line": 314,
            "docstring": "Validate that voice adaptation meets quality standards"
          },
          {
            "name": "enhance_content_generation",
            "line": 405,
            "docstring": "Add brand voice to content generation pipeline"
          },
          {
            "name": "create_multi_voice_adapter",
            "line": 411,
            "docstring": "Create multi-voice adaptation for A/B testing"
          },
          {
            "name": "create_voice_consistency_checker",
            "line": 454,
            "docstring": "Create voice consistency validation across content pieces"
          },
          {
            "name": "adapt_multiple_voices",
            "line": 414,
            "docstring": "Generate content variations with different voices"
          },
          {
            "name": "check_voice_consistency",
            "line": 457,
            "docstring": "Check voice consistency across multiple content pieces"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "asyncio",
          "datetime",
          "pydantic",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "prompt_templates",
          "openai_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 528
      },
      {
        "name": "wordpress_publishing_chain",
        "path": "src/chains/wordpress_publishing_chain.py",
        "category": "chain",
        "size": 20687,
        "last_modified": "2025-06-17T12:14:15",
        "module_docstring": "WordPress Publishing Chain - Native LangChain Implementation\nTransforms content into WordPress-ready XML using native LangChain patterns\n\n\u2705 NATIVE LANGCHAIN PATTERNS:\n- RunnableSequence for content \u2192 metadata \u2192 XML transformation\n- RunnableLambda for transformation functions\n- RunnableBranch for conditional logic based on content type\n- Structured outputs with Pydantic models\n\n\ud83c\udfaf USAGE: content_data | wordpress_publishing_chain \u2192 WordPress XML",
        "classes": [
          {
            "name": "WordPressMetadata",
            "line": 36,
            "docstring": "WordPress post metadata structure"
          },
          {
            "name": "GutenblockContent",
            "line": 54,
            "docstring": "Gutenberg block structure"
          },
          {
            "name": "WordPressExportData",
            "line": 61,
            "docstring": "Complete WordPress export structure"
          },
          {
            "name": "WordPressPublishingEnhancer",
            "line": 362,
            "docstring": "Helper for integrating WordPress publishing with v2 systems"
          }
        ],
        "functions": [
          {
            "name": "create_content_to_gutenberg_transformer",
            "line": 70,
            "docstring": "Transform content into Gutenberg blocks"
          },
          {
            "name": "create_metadata_enricher",
            "line": 106,
            "docstring": "Enrich content with WordPress metadata"
          },
          {
            "name": "create_xml_generator",
            "line": 153,
            "docstring": "Generate WordPress WXR XML from metadata"
          },
          {
            "name": "create_content_type_router",
            "line": 245,
            "docstring": "Route content based on type using RunnableBranch"
          },
          {
            "name": "create_wordpress_publishing_chain",
            "line": 297,
            "docstring": "Create WordPress publishing chain using native LangChain patterns\n\n\u2705 NATIVE LANGCHAIN COMPONENTS:\n- RunnableSequence for content \u2192 metadata \u2192 XML flow\n- RunnableLambda for transformation functions\n- RunnableBranch for content type conditional logic\n- Structured outputs with Pydantic models\n\nArgs:\n    llm: Language model for content enhancement\n\nReturns:\n    RunnableSequence: Composable chain for WordPress publishing\n    \nUsage:\n    content_data | wordpress_publishing_chain \u2192 WordPress XML"
          },
          {
            "name": "transform_to_gutenberg",
            "line": 73,
            "docstring": "Convert content to Gutenberg blocks"
          },
          {
            "name": "enrich_metadata",
            "line": 109,
            "docstring": "Add WordPress-specific metadata to content"
          },
          {
            "name": "generate_wxr_xml",
            "line": 156,
            "docstring": "Create WordPress WXR (WordPress eXtended RSS) XML"
          },
          {
            "name": "is_casino_review",
            "line": 248,
            "docstring": "Check if content is a casino review"
          },
          {
            "name": "is_slot_review",
            "line": 252,
            "docstring": "Check if content is a slot review"
          },
          {
            "name": "is_news_article",
            "line": 256,
            "docstring": "Check if content is a news article"
          },
          {
            "name": "enhance_content_pipeline",
            "line": 366,
            "docstring": "Add WordPress publishing to content generation pipeline"
          },
          {
            "name": "create_multi_site_publisher",
            "line": 372,
            "docstring": "Create multi-site publishing component"
          },
          {
            "name": "create_xml_validator",
            "line": 410,
            "docstring": "Create XML validation component"
          },
          {
            "name": "publish_to_multiple_sites",
            "line": 375,
            "docstring": "Publish content to multiple WordPress sites"
          },
          {
            "name": "validate_wordpress_xml",
            "line": 413,
            "docstring": "Validate WordPress XML format"
          },
          {
            "name": "check_element",
            "line": 424,
            "docstring": null
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "asyncio",
          "html",
          "datetime",
          "xml.etree.ElementTree",
          "pydantic",
          "langchain_openai",
          "xml.dom"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "prompt_templates",
          "openai_api",
          "wordpress_api",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 495
      },
      {
        "name": "enhanced_web_research_chain",
        "path": "src/chains/enhanced_web_research_chain.py",
        "category": "chain",
        "size": 26593,
        "last_modified": "2025-06-26T14:09:28",
        "module_docstring": "Enhanced Web Research Chain - Native LangChain WebBaseLoader\nAdvanced implementation for collecting 95+ casino data points with geo-restrictions handling\n\n\u2705 PRODUCTION FEATURES:\n- Multi-region URL strategies for geo-restricted sites\n- Smart content parsing with fallback mechanisms\n- Concurrent loading with rate limiting\n- Integration with 95-field ComprehensiveResearchData\n- Error recovery and retry mechanisms\n\n\ud83c\udfaf HANDLES GEO-RESTRICTIONS:\n- Alternative domain discovery (.com, .co.uk, .ca, etc.)\n- Proxy rotation support\n- Mirror site detection\n- Archive.org fallback for blocked content",
        "classes": [
          {
            "name": "ComprehensiveResearchData",
            "line": 37,
            "docstring": "Simplified 95-field structure for casino research"
          },
          {
            "name": "URLStrategy",
            "line": 50,
            "docstring": "URL generation strategy for different casino data categories"
          },
          {
            "name": "EnhancedWebBaseLoader",
            "line": 126,
            "docstring": "Enhanced WebBaseLoader with casino-specific optimizations"
          },
          {
            "name": "CasinoDataExtractor",
            "line": 265,
            "docstring": "Extract structured data from web content using LLM"
          },
          {
            "name": "ComprehensiveWebResearchChain",
            "line": 474,
            "docstring": "Main LCEL chain for comprehensive casino research using WebBaseLoader"
          }
        ],
        "functions": [
          {
            "name": "create_comprehensive_web_research_chain",
            "line": 574,
            "docstring": "Factory function for creating the chain"
          },
          {
            "name": "generate_urls",
            "line": 157,
            "docstring": "Generate comprehensive URL lists for data collection"
          },
          {
            "name": "load_with_fallback",
            "line": 185,
            "docstring": "Load URLs with fallback mechanisms"
          },
          {
            "name": "extract_category_data",
            "line": 347,
            "docstring": "Extract data for a specific category from documents"
          },
          {
            "name": "invoke",
            "line": 568,
            "docstring": "Invoke the chain with input"
          },
          {
            "name": "load_and_extract_data",
            "line": 513,
            "docstring": "Function to load documents and extract data for all categories."
          }
        ],
        "imports": [
          "re",
          "typing",
          "langchain_core.documents",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "asyncio",
          "traceback",
          "langchain_core.output_parsers",
          "urllib.parse",
          "dataclasses",
          "pydantic",
          "langchain_openai",
          "time",
          "concurrent.futures",
          "langchain_community.document_loaders"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "openai_api",
          "research_functionality",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 642
      },
      {
        "name": "authority_links_config",
        "path": "src/chains/authority_links_config.py",
        "category": "chain",
        "size": 12502,
        "last_modified": "2025-06-20T17:50:59",
        "module_docstring": "Configuration for Authority Links by Region and Presets\nProvides region-specific authoritative links and configuration presets",
        "classes": [
          {
            "name": "AuthorityLinkPresets",
            "line": 9,
            "docstring": "Preset configurations for different use cases"
          }
        ],
        "functions": [
          {
            "name": "get_authority_links_for_region",
            "line": 48,
            "docstring": "Get authority links specific to a region"
          },
          {
            "name": "get_casino_specific_links",
            "line": 198,
            "docstring": "Get links specific to casino types or features"
          },
          {
            "name": "get_compliance_links",
            "line": 235,
            "docstring": "Get compliance and security related links"
          },
          {
            "name": "create_custom_link_set",
            "line": 270,
            "docstring": "Create a custom set of authority links based on parameters"
          },
          {
            "name": "seo_optimized",
            "line": 13,
            "docstring": "SEO-optimized configuration"
          },
          {
            "name": "content_rich",
            "line": 25,
            "docstring": "Content-rich configuration with more links"
          },
          {
            "name": "minimal",
            "line": 37,
            "docstring": "Minimal configuration for conservative linking"
          }
        ],
        "imports": [
          "typing",
          "authoritative_hyperlink_engine"
        ],
        "features": [
          "has_tests"
        ],
        "lines_of_code": 294
      },
      {
        "name": "visual_content_pipeline",
        "path": "src/chains/visual_content_pipeline.py",
        "category": "chain",
        "size": 26536,
        "last_modified": "2025-08-24T21:46:42",
        "module_docstring": "\ud83c\udfa8 Visual Content & Screenshot Pipeline - PHASE 3\n================================================\n\nComplete visual content management system for the Agentic Multi-Tenant RAG CMS:\n- Automated screenshot capture with Browserbase/Playwright integration\n- Visual content processing and quality assessment\n- Compliance validation for images and media assets\n- Integration with narrative generation and QA chains\n- Multi-tenant visual content management\n\nAuthor: AI Assistant & TaskMaster System\nCreated: 2025-08-24\nTask: task-015 - Visual Content & Screenshot Pipeline (Phase 3)\nVersion: 1.0.0",
        "classes": [
          {
            "name": "VisualContentType",
            "line": 76,
            "docstring": "Types of visual content for processing"
          },
          {
            "name": "VisualQuality",
            "line": 88,
            "docstring": "Visual content quality assessment"
          },
          {
            "name": "VisualComplianceStatus",
            "line": 97,
            "docstring": "Visual content compliance status"
          },
          {
            "name": "VisualContentRequest",
            "line": 104,
            "docstring": "Request for visual content capture and processing"
          },
          {
            "name": "VisualContentAsset",
            "line": 114,
            "docstring": "Processed visual content asset"
          },
          {
            "name": "VisualContentResult",
            "line": 130,
            "docstring": "Result from visual content processing pipeline"
          },
          {
            "name": "VisualContentCapture",
            "line": 145,
            "docstring": "Handles automated visual content capture from casino websites"
          },
          {
            "name": "VisualContentProcessor",
            "line": 226,
            "docstring": "Processes and analyzes captured visual content"
          },
          {
            "name": "VisualContentValidator",
            "line": 348,
            "docstring": "Validates visual content for compliance and quality standards"
          },
          {
            "name": "VisualContentPipeline",
            "line": 474,
            "docstring": "Complete visual content processing pipeline"
          }
        ],
        "functions": [
          {
            "name": "create_visual_content_pipeline",
            "line": 589,
            "docstring": "Factory function to create a visual content pipeline"
          },
          {
            "name": "create_visual_content_chain",
            "line": 604,
            "docstring": "Factory function to create a visual content processing chain"
          },
          {
            "name": "integrate_visual_content_with_narrative_generation",
            "line": 614,
            "docstring": "Integrate visual content pipeline with narrative generation"
          },
          {
            "name": "capture_casino_screenshots",
            "line": 157,
            "docstring": "Capture screenshots for a casino using available services"
          },
          {
            "name": "process_visual_assets",
            "line": 266,
            "docstring": "Process captured screenshots into structured visual assets"
          },
          {
            "name": "validate_visual_assets",
            "line": 392,
            "docstring": "Validate a collection of visual assets"
          },
          {
            "name": "process_visual_content",
            "line": 571,
            "docstring": "Process visual content through the complete pipeline"
          },
          {
            "name": "process_with_visuals",
            "line": 620,
            "docstring": "Process visual content and integrate with narrative generation"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.documents",
          "src.chains.multi_tenant_retrieval_system",
          "enum",
          "asyncio",
          "langchain_openai",
          "langchain_core.prompts",
          "src.integrations.playwright_screenshot_engine",
          "src.integrations.browserbase_screenshot_toolkit",
          "langchain_core.runnables",
          "hashlib",
          "src.schemas.review_doc",
          "datetime",
          "langchain_core.output_parsers",
          "json",
          "base64",
          "src.integrations.supabase_vector_store",
          "pydantic",
          "pathlib"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "openai_api",
          "screenshot_capture",
          "production_ready"
        ],
        "lines_of_code": 657
      },
      {
        "name": "authoritative_hyperlink_engine",
        "path": "src/chains/authoritative_hyperlink_engine.py",
        "category": "chain",
        "size": 15808,
        "last_modified": "2025-06-20T17:50:15",
        "module_docstring": "Authoritative Hyperlink Generation Engine using LangChain LCEL\nImplements semantic-based contextual linking for casino content",
        "classes": [
          {
            "name": "LinkCategory",
            "line": 30,
            "docstring": "Categories of authoritative links"
          },
          {
            "name": "AuthorityLink",
            "line": 38,
            "docstring": "Model for an authoritative link"
          },
          {
            "name": "LinkPlacement",
            "line": 49,
            "docstring": "Model for where to place a link in content"
          },
          {
            "name": "LinkGenerationConfig",
            "line": 58,
            "docstring": "Configuration for link generation"
          },
          {
            "name": "AuthorityLinkDatabase",
            "line": 69,
            "docstring": "Database of authoritative links with semantic search"
          },
          {
            "name": "AuthoritativeHyperlinkEngine",
            "line": 229,
            "docstring": "Main engine for generating authoritative hyperlinks"
          }
        ],
        "functions": [
          {
            "name": "create_authoritative_hyperlink_engine",
            "line": 359,
            "docstring": "Factory function to create hyperlink engine"
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain.schema",
          "langchain_core.runnables",
          "langchain_community.vectorstores",
          "enum",
          "asyncio",
          "langchain.text_splitter",
          "langchain_core.output_parsers",
          "pydantic",
          "dataclasses",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "vector_store",
          "embeddings",
          "openai_api",
          "async_support"
        ],
        "lines_of_code": 372
      },
      {
        "name": "qa_compliance_chain",
        "path": "src/chains/qa_compliance_chain.py",
        "category": "chain",
        "size": 35532,
        "last_modified": "2025-08-24T14:09:19",
        "module_docstring": "\ud83d\udee1\ufe0f QA & Compliance Chain\nTask-014: LCEL QA chain for affiliate compliance, fact-checking, and brand style validation\n\nFeatures:\n- Affiliate compliance validation (18+, responsible gambling, disclosure)\n- Factual accuracy verification against source data\n- Brand style and voice consistency checking\n- Multi-tenant compliance rules per jurisdiction\n- Human-in-the-loop override workflow integration\n- Publishing gate with detailed failure reporting",
        "classes": [
          {
            "name": "QAValidationLevel",
            "line": 41,
            "docstring": "QA validation intensity levels"
          },
          {
            "name": "QAValidationInput",
            "line": 49,
            "docstring": "Input for QA validation chain"
          },
          {
            "name": "QAValidationOutput",
            "line": 59,
            "docstring": "Output from QA validation chain"
          },
          {
            "name": "AffiliateComplianceValidator",
            "line": 71,
            "docstring": "Validates affiliate compliance requirements"
          },
          {
            "name": "FactualAccuracyValidator",
            "line": 165,
            "docstring": "Validates factual accuracy against source documents"
          },
          {
            "name": "BrandStyleValidator",
            "line": 268,
            "docstring": "Validates brand voice and style consistency"
          },
          {
            "name": "ContentQualityValidator",
            "line": 375,
            "docstring": "Validates overall content quality metrics"
          },
          {
            "name": "HumanReviewGateway",
            "line": 491,
            "docstring": "Manages human-in-the-loop review workflow"
          },
          {
            "name": "QAComplianceChain",
            "line": 545,
            "docstring": "Complete LCEL chain for QA validation and compliance checking"
          }
        ],
        "functions": [
          {
            "name": "create_qa_compliance_chain",
            "line": 852,
            "docstring": "Create a QA compliance chain with specified parameters\n\nArgs:\n    llm_model: LLM model name\n    validation_level: Validation intensity level\n    temperature: LLM temperature (low for consistency)\n    \nReturns:\n    Configured QA compliance chain"
          },
          {
            "name": "validate_affiliate_compliance",
            "line": 125,
            "docstring": "Validate affiliate compliance requirements"
          },
          {
            "name": "validate_factual_accuracy",
            "line": 212,
            "docstring": "Validate factual accuracy of content"
          },
          {
            "name": "validate_brand_style",
            "line": 315,
            "docstring": "Validate brand style and voice consistency"
          },
          {
            "name": "validate_content_quality",
            "line": 422,
            "docstring": "Validate overall content quality"
          },
          {
            "name": "requires_human_review",
            "line": 497,
            "docstring": "Determine if human review is required"
          },
          {
            "name": "submit_for_human_review",
            "line": 522,
            "docstring": "Submit content for human review and return review ID"
          },
          {
            "name": "get_human_review_status",
            "line": 540,
            "docstring": "Get status of human review"
          },
          {
            "name": "validate_content",
            "line": 796,
            "docstring": "Validate content using the complete QA chain\n\nArgs:\n    input_data: Complete validation input specification\n    \nReturns:\n    Comprehensive validation results with publish recommendation"
          },
          {
            "name": "create_compliance_validator",
            "line": 575,
            "docstring": "Create tenant-specific compliance validator"
          },
          {
            "name": "run_parallel_validation",
            "line": 580,
            "docstring": "Execute all validation checks in parallel"
          },
          {
            "name": "calculate_validation_results",
            "line": 622,
            "docstring": "Calculate overall validation results and recommendations"
          },
          {
            "name": "create_qa_report",
            "line": 682,
            "docstring": "Create comprehensive QA report"
          },
          {
            "name": "create_output",
            "line": 734,
            "docstring": "Create final validation output"
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.documents",
          "langchain_core.runnables",
          "src.schemas.casino_intelligence_schema",
          "enum",
          "src.schemas.review_doc",
          "datetime",
          "langchain_core.output_parsers",
          "json",
          "pydantic",
          "pathlib",
          "langchain_openai"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "openai_api",
          "publishing"
        ],
        "lines_of_code": 877
      },
      {
        "name": "web_research_chain",
        "path": "src/chains/web_research_chain.py",
        "category": "chain",
        "size": 21968,
        "last_modified": "2025-06-18T09:39:28",
        "module_docstring": "Web Research Chain - Native LangChain WebBaseLoader Implementation\nCollects 95+ data points for casino research using WebBaseLoader with advanced URL strategies\n\n\u2705 NATIVE LANGCHAIN PATTERNS:\n- WebBaseLoader with concurrent loading and custom parsers\n- RunnableParallel for multi-category URL scraping\n- Strategic URL generation for different data categories\n- Structured integration with 95-field ComprehensiveResearchData\n\n\u2705 INTEGRATION POINTS:\n- ComprehensiveResearchChain: Direct data feeding\n- Universal RAG Chain: Enhanced research capabilities\n- Supabase Storage: Document persistence and vector embedding\n- Enhanced Confidence Scoring: Source quality assessment\n\n\ud83c\udfaf USAGE: casino_domain | web_research_chain \u2192 95+ structured fields from web scraping",
        "classes": [
          {
            "name": "CasinoURLStrategy",
            "line": 58,
            "docstring": "Strategic URL generation for different data categories"
          },
          {
            "name": "EnhancedCasinoWebLoader",
            "line": 138,
            "docstring": "Enhanced WebBaseLoader with casino-specific optimizations"
          },
          {
            "name": "WebDataExtractor",
            "line": 216,
            "docstring": "Extract structured data from web documents using LLM"
          },
          {
            "name": "WebResearchEnhancer",
            "line": 501,
            "docstring": "Integration helpers for existing Universal RAG system"
          }
        ],
        "functions": [
          {
            "name": "create_web_research_chain",
            "line": 364,
            "docstring": "Create comprehensive web research chain for 95+ data points\n\nArgs:\n    llm: Language model for data extraction\n    requests_per_second: Rate limit for web requests\n    continue_on_failure: Continue if some URLs fail\n    \nReturns:\n    RunnableSequence that takes casino_domain and returns ComprehensiveResearchData"
          },
          {
            "name": "generate_casino_urls",
            "line": 62,
            "docstring": "Generate comprehensive URL lists for each data category\n\nArgs:\n    base_domain: Casino domain (e.g., \"betway.com\", \"888casino.com\")\n    \nReturns:\n    Dict mapping categories to URL lists for scraping"
          },
          {
            "name": "create_loader",
            "line": 170,
            "docstring": "Create configured WebBaseLoader for casino URLs"
          },
          {
            "name": "create_extraction_prompts",
            "line": 226,
            "docstring": "Create category-specific extraction prompts"
          },
          {
            "name": "create_extraction_chains",
            "line": 351,
            "docstring": "Create extraction chains for each category"
          },
          {
            "name": "generate_urls",
            "line": 391,
            "docstring": "Generate category URLs from casino domain"
          },
          {
            "name": "extract_category_data",
            "line": 419,
            "docstring": "Extract structured data from loaded documents"
          },
          {
            "name": "structure_final_data",
            "line": 454,
            "docstring": "Structure extracted data into final format"
          },
          {
            "name": "enhance_universal_rag_chain",
            "line": 505,
            "docstring": "Add web research capabilities to Universal RAG Chain"
          },
          {
            "name": "create_web_research_api_endpoint",
            "line": 537,
            "docstring": "Create FastAPI endpoint for web research"
          },
          {
            "name": "combined_research",
            "line": 508,
            "docstring": "Combine web research with existing RAG capabilities"
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "asyncio",
          "datetime",
          "langchain_core.output_parsers",
          "urllib.parse",
          "comprehensive_research_chain",
          "pydantic",
          "langchain_openai",
          "langchain_community.document_loaders"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 600
      },
      {
        "name": "advanced_prompt_system",
        "path": "src/chains/advanced_prompt_system.py",
        "category": "chain",
        "size": 56427,
        "last_modified": "2025-06-20T23:24:07",
        "module_docstring": "Advanced Prompt Optimization System for Universal RAG CMS\nDelivers 37% relevance improvement, 31% accuracy improvement, 44% satisfaction improvement\n\nComponents:\n- QueryClassifier: 8 domain-specific query types with ML-based classification\n- AdvancedContextFormatter: Enhanced context with semantic structure and quality indicators\n- EnhancedSourceFormatter: Rich source metadata with trust scores and validation\n- DomainSpecificPrompts: Specialized prompts for each query type and expertise level\n- OptimizedPromptManager: Central orchestration with confidence scoring and fallback",
        "classes": [
          {
            "name": "QueryType",
            "line": 24,
            "docstring": "8 domain-specific query types for casino/gambling content"
          },
          {
            "name": "ExpertiseLevel",
            "line": 36,
            "docstring": "User expertise levels for content personalization"
          },
          {
            "name": "ResponseFormat",
            "line": 44,
            "docstring": "Preferred response formats based on query type"
          },
          {
            "name": "QueryAnalysis",
            "line": 53,
            "docstring": "Comprehensive query analysis results"
          },
          {
            "name": "QueryClassifier",
            "line": 76,
            "docstring": "Advanced ML-based query classifier with 8 domain-specific types"
          },
          {
            "name": "AdvancedContextFormatter",
            "line": 290,
            "docstring": "Enhanced context formatting with semantic structure and quality indicators"
          },
          {
            "name": "EnhancedSourceFormatter",
            "line": 513,
            "docstring": "Rich source metadata with trust scores and validation"
          },
          {
            "name": "DomainSpecificPrompts",
            "line": 619,
            "docstring": "Specialized prompts for each query type and expertise level"
          },
          {
            "name": "OptimizedPromptManager",
            "line": 1265,
            "docstring": "Central orchestration with confidence scoring and fallback mechanisms"
          }
        ],
        "functions": [
          {
            "name": "to_dict",
            "line": 63,
            "docstring": "Convert to dictionary for serialization"
          },
          {
            "name": "classify_query",
            "line": 132,
            "docstring": "Classify query using weighted keyword matching and ML heuristics"
          },
          {
            "name": "format_enhanced_context",
            "line": 300,
            "docstring": "Format context with enhanced semantic structure"
          },
          {
            "name": "format_sources",
            "line": 516,
            "docstring": "Format sources with enhanced metadata"
          },
          {
            "name": "get_optimized_prompt",
            "line": 1239,
            "docstring": "Get optimized prompt based on query type and expertise level"
          },
          {
            "name": "get_query_analysis",
            "line": 1284,
            "docstring": "Analyze query and return comprehensive analysis"
          },
          {
            "name": "format_enhanced_context",
            "line": 1296,
            "docstring": "Format context with advanced enhancements"
          },
          {
            "name": "optimize_prompt",
            "line": 1305,
            "docstring": "Generate optimized prompt based on analysis"
          },
          {
            "name": "get_performance_stats",
            "line": 1365,
            "docstring": "Get performance and usage statistics"
          },
          {
            "name": "reset_stats",
            "line": 1383,
            "docstring": "Reset performance statistics"
          },
          {
            "name": "test_optimization_system",
            "line": 1396,
            "docstring": "Test the advanced prompt optimization system"
          },
          {
            "name": "calculate_doc_score",
            "line": 344,
            "docstring": null
          }
        ],
        "imports": [
          "re",
          "typing",
          "logging",
          "enum",
          "hashlib",
          "datetime",
          "json",
          "src.templates.improved_template_manager",
          "dataclasses"
        ],
        "features": [
          "lcel_composition",
          "has_tests"
        ],
        "lines_of_code": 1438
      },
      {
        "name": "universal_rag_lcel",
        "path": "src/chains/universal_rag_lcel.py",
        "category": "chain",
        "size": 295993,
        "last_modified": "2025-08-23T23:07:45",
        "module_docstring": "Universal RAG LCEL Chain with ALL Advanced Features Integrated\nThe ultimate comprehensive pipeline using all built components\n\nINTEGRATED SYSTEMS:\n\u2705 Enhanced Confidence Scoring (4-factor assessment)\n\u2705 Advanced Prompt Optimization (8 query types \u00d7 4 expertise levels)\n\u2705 Contextual Retrieval System (hybrid + multi-query + MMR + self-query)\n\u2705 Template System v2.0 (34 specialized templates)\n\u2705 DataForSEO Image Integration (quality scoring + caching)\n\u2705 WordPress REST API Publishing (multi-auth + media handling) \n\u2705 FTI Content Processing (content detection + adaptive chunking + metadata)\n\u2705 Security & Compliance (enterprise-grade security)\n\u2705 Monitoring & Performance Profiling (real-time analytics)\n\u2705 Configuration Management (live updates + A/B testing)\n\u2705 Native LangChain Semantic Caching (RedisSemanticCache with content-type support)\n\nPerformance: Sub-500ms response times with 49% failure rate reduction\n\nMIGRATION NOTE: This file has been updated to use LangChain's native caching infrastructure\nwith RedisSemanticCache for simple and efficient caching. The old QueryAwareCache methods\nare deprecated and will be removed in a future version. LangChain now handles caching\nautomatically with set_llm_cache().",
        "classes": [
          {
            "name": "RAGException",
            "line": 207,
            "docstring": "Base exception for RAG operations"
          },
          {
            "name": "RetrievalException",
            "line": 211,
            "docstring": "Exception during document retrieval"
          },
          {
            "name": "GenerationException",
            "line": 215,
            "docstring": "Exception during response generation"
          },
          {
            "name": "ValidationException",
            "line": 219,
            "docstring": "Exception during input validation"
          },
          {
            "name": "RAGResponse",
            "line": 224,
            "docstring": "Enhanced RAG response with optimization metadata"
          },
          {
            "name": "RAGMetricsCallback",
            "line": 239,
            "docstring": "Enhanced callback for tracking RAG performance metrics"
          },
          {
            "name": "EnhancedVectorStore",
            "line": 295,
            "docstring": "Native LangChain wrapper using SupabaseVectorStore"
          },
          {
            "name": "QueryAwareCache",
            "line": 380,
            "docstring": "Smart caching with dynamic TTL based on query type"
          },
          {
            "name": "UniversalRAGChain",
            "line": 487,
            "docstring": "\ud83d\ude80 ULTIMATE Universal RAG Chain - ALL Advanced Features Integrated\n\nCOMPREHENSIVE INTEGRATION:\n\u2705 Contextual Retrieval System (Task 3) - hybrid + multi-query + MMR + self-query\n\u2705 Template System v2.0 (34 specialized templates)\n\u2705 DataForSEO Image Integration (quality scoring + caching)\n\u2705 WordPress Publishing (multi-auth + media handling)\n\u2705 FTI Content Processing (content detection + chunking + metadata)\n\u2705 Enhanced Confidence Scoring (4-factor assessment)\n\u2705 Security & Compliance (enterprise-grade)\n\u2705 Performance Profiling (real-time analytics)\n\u2705 Intelligent Caching (query-aware TTL)"
          },
          {
            "name": "Config",
            "line": 235,
            "docstring": null
          },
          {
            "name": "CasinoContent",
            "line": 3902,
            "docstring": "Structured casino content with standardized sections"
          }
        ],
        "functions": [
          {
            "name": "create_universal_rag_chain",
            "line": 6184,
            "docstring": "Factory function to create Universal RAG Chain\n\nArgs:\n    model_name: LLM model to use (gpt-4, claude-3-sonnet, etc.)\n    temperature: Temperature for generation (0.0-1.0)\n    enable_caching: Enable semantic caching with query-aware TTL\n    enable_contextual_retrieval: Enable contextual retrieval (49% failure reduction)\n    enable_prompt_optimization: Enable advanced prompt optimization (37% relevance improvement)\n    enable_enhanced_confidence: Enable enhanced confidence scoring system (4-factor analysis)\n    vector_store: Vector store instance (Supabase/Pinecone/etc.)\n    \nReturns:\n    Configured UniversalRAGChain instance"
          },
          {
            "name": "on_chain_start",
            "line": 251,
            "docstring": null
          },
          {
            "name": "on_retriever_start",
            "line": 255,
            "docstring": null
          },
          {
            "name": "on_retriever_end",
            "line": 259,
            "docstring": null
          },
          {
            "name": "on_llm_start",
            "line": 264,
            "docstring": null
          },
          {
            "name": "on_llm_end",
            "line": 268,
            "docstring": null
          },
          {
            "name": "get_metrics",
            "line": 281,
            "docstring": null
          },
          {
            "name": "get_stats",
            "line": 475,
            "docstring": "Get cache performance statistics"
          },
          {
            "name": "get_dynamic_cache_ttl_hours",
            "line": 5776,
            "docstring": "Get dynamic TTL based on query type, confidence, and user expertise.\n\nTask 2.3 Dynamic TTL Implementation."
          },
          {
            "name": "generate_enhanced_cache_key_task23",
            "line": 5831,
            "docstring": "Generate enhanced cache key with query type and expertise level.\n\nTask 2.3 Query-Type Aware Caching Implementation."
          },
          {
            "name": "get_cache_stats",
            "line": 6119,
            "docstring": "Get caching performance statistics"
          },
          {
            "name": "get_from_cache",
            "line": 6142,
            "docstring": "Legacy cache method - deprecated"
          },
          {
            "name": "add_to_cache",
            "line": 6152,
            "docstring": "Legacy cache method - deprecated"
          },
          {
            "name": "invalidate_cache_entry",
            "line": 6162,
            "docstring": "Legacy cache method - deprecated"
          },
          {
            "name": "clear_all_cache",
            "line": 6172,
            "docstring": "Legacy cache method - deprecated"
          },
          {
            "name": "count_filled_fields",
            "line": 2454,
            "docstring": null
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.documents",
          "langchain_core.callbacks",
          "integrations.coinflip_wordpress_publisher",
          "src.schemas.casino_intelligence_schema",
          "enum",
          "asyncio",
          "markdown",
          "templates.improved_template_manager",
          "dotenv",
          "langchain",
          "langchain_openai",
          "warnings",
          "langchain_redis.cache",
          "langchain_community.document_loaders",
          "langchain_core.prompts",
          "langchain_anthropic",
          "traceback",
          "authoritative_hyperlink_engine",
          "integrations.langchain_wordpress_tool",
          "enhanced_web_research_chain",
          "uuid",
          "supabase",
          "integrations.browserbase_screenshot_toolkit",
          "integrations.dataforseo_image_search",
          "integrations.wordpress_publisher",
          "integrations.bulletproof_image_uploader_v1",
          "integrations.wordpress_chain_integration",
          "langchain_core.runnables",
          "langchain_community.vectorstores",
          "hashlib",
          "json",
          "datetime",
          "langchain_core.output_parsers",
          "langchain.retrievers",
          "langchain_community.vectorstores.supabase",
          "dataclasses",
          "src.integrations.wordpress_publisher",
          "abc",
          "collections",
          "langchain_community.tools.tavily_search",
          "authority_links_config",
          "os",
          "re",
          "langchain.schema",
          "pydantic",
          "enhanced_confidence_scoring_system",
          "time",
          "langchain_community.retrievers",
          "langchain_core.globals"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "wordpress_api",
          "tavily_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 6296
      },
      {
        "name": "integrated_rag_chain",
        "path": "src/chains/integrated_rag_chain.py",
        "category": "chain",
        "size": 29045,
        "last_modified": "2025-06-17T21:31:18",
        "module_docstring": "Integrated Universal RAG Chain with Full Monitoring and Configuration\nExtends the existing UniversalRAGChain with comprehensive monitoring, configuration, and feature flags.\n\nThis implementation provides:\n- Runtime configuration management\n- Real-time performance monitoring\n- Feature flag-based gradual rollout\n- Comprehensive profiling and analytics\n- Backward compatibility with existing code",
        "classes": [
          {
            "name": "IntegratedRAGChain",
            "line": 64,
            "docstring": "Enhanced Universal RAG Chain with integrated monitoring, configuration, and feature flags.\n\nThis class extends UniversalRAGChain to add:\n- Dynamic configuration management\n- Comprehensive performance monitoring\n- Feature flag-based control\n- Real-time analytics and profiling\n- Enhanced logging and observability"
          },
          {
            "name": "MonitoredUniversalRAGChain",
            "line": 679,
            "docstring": "Alias for backward compatibility."
          }
        ],
        "functions": [
          {
            "name": "create_integrated_rag_chain",
            "line": 632,
            "docstring": "Factory function to create an Integrated RAG Chain with monitoring.\n\nArgs:\n    model_name: LLM model to use\n    temperature: Temperature for generation\n    supabase_client: Supabase client for persistence\n    enable_all_features: Enable all integration features\n    **kwargs: Additional parameters\n    \nReturns:\n    Configured IntegratedRAGChain instance"
          },
          {
            "name": "get_monitoring_stats",
            "line": 599,
            "docstring": "Get current monitoring statistics."
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.documents",
          "langchain_core.callbacks",
          "asyncio",
          "config.feature_flags",
          "langchain_core.prompts",
          "monitoring.performance_profiler",
          "uuid",
          "advanced_prompt_system",
          "supabase",
          "config.prompt_config",
          "langchain_core.runnables",
          "hashlib",
          "json",
          "datetime",
          "langchain_core.output_parsers",
          "os",
          "universal_rag_lcel",
          "utils.enhanced_logging",
          "monitoring.prompt_analytics",
          "pydantic",
          "time"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 735
      },
      {
        "name": "optimized_research_pipeline",
        "path": "src/chains/optimized_research_pipeline.py",
        "category": "chain",
        "size": 18369,
        "last_modified": "2025-08-26T20:42:48.061352",
        "module_docstring": "\ud83c\udfaf OPTIMIZED 95+ DATAFIELD RESEARCH PIPELINE - LCEL NATIVE\n==========================================================\n\nProduction-ready research system combining existing modules with LangChain efficiency patterns:\n- Real Supabase Research Tool (existing) for data retrieval\n- Enhanced Multi-Query Retriever for comprehensive coverage\n- EnsembleRetriever (BM25 + Vector) for maximum recall\n- RunnableParallel for concurrent processing \n- Agentic Supabase Vector Store for intelligent indexing\n\nClaude.md Compliance:\n\u2705 Pure LCEL composition (|, RunnableParallel, RunnablePassthrough)\n\u2705 Tools via /src/tools/* adapters only\n\u2705 Pydantic v2 schemas for all I/O\n\u2705 No custom orchestration outside LangChain",
        "classes": [
          {
            "name": "ResearchOutput",
            "line": 47,
            "docstring": "Output schema for comprehensive research pipeline"
          },
          {
            "name": "OptimizedResearchPipeline",
            "line": 58,
            "docstring": "\ud83c\udfaf OPTIMIZED RESEARCH PIPELINE WITH 95+ DATAFIELD INTELLIGENCE\n==============================================================\n\nFeatures:\n- RunnableParallel for concurrent web research + database retrieval\n- EnsembleRetriever (BM25 + Vector) for comprehensive data coverage\n- MultiQueryRetriever for query expansion and comprehensive results\n- Real Supabase integration for production data persistence\n- Agentic vector store for intelligent document indexing\n- Pure LCEL composition throughout the pipeline"
          }
        ],
        "functions": [
          {
            "name": "create_optimized_research_pipeline",
            "line": 389,
            "docstring": "Create configured optimized research pipeline"
          },
          {
            "name": "research_casino_sync",
            "line": 378,
            "docstring": "Synchronous version for easier integration"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.documents",
          "agents.research_agent",
          "asyncio",
          "langchain_openai",
          "langchain_core.prompts",
          "langchain.text_splitter",
          "tools.real_supabase_research_tool",
          "langchain_core.runnables",
          "datetime",
          "langchain_core.output_parsers",
          "langchain.retrievers",
          "agents.research_ingestion_agent",
          "schemas.casino_intelligence_schema",
          "integrations.supabase_vector_store",
          "os",
          "schemas.review_doc",
          "pydantic",
          "langchain_community.retrievers"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "research_functionality",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 442
      },
      {
        "name": "universal_casino_lcel",
        "path": "src/chains/universal_casino_lcel.py",
        "category": "chain",
        "size": 18845,
        "last_modified": "2025-08-22T20:37:40",
        "module_docstring": "Universal Casino Review Chain - Pure LCEL Implementation\n=======================================================\n\nThis is a proper LangChain LCEL chain that can be used for any casino review.\nUses ONLY native LangChain components with | operator composition.\n\nFollows CLAUDE.md best practices:\n1. \u2705 LCEL everywhere (| composition with Runnable*, ChatPromptTemplate, RouterRunnable)\n2. \u2705 No custom orchestration (no raw asyncio.gather, no raw HTTP)\n3. \u2705 Schema-First (inputs/outputs in /src/schemas)\n4. \u2705 External services only via /src/tools/*\n\nUsage:\n    from chains.universal_casino_lcel import create_universal_casino_chain\n    \n    chain = create_universal_casino_chain()\n    result = await chain.ainvoke({\"casino_name\": \"Mr Vegas Casino\"})",
        "classes": [
          {
            "name": "CasinoReviewInput",
            "line": 62,
            "docstring": "Input schema for casino review chain"
          },
          {
            "name": "CasinoReviewOutput",
            "line": 69,
            "docstring": "Output schema for casino review chain"
          }
        ],
        "functions": [
          {
            "name": "create_research_chain",
            "line": 81,
            "docstring": "Create research chain using native LangChain components"
          },
          {
            "name": "create_rag_content_generation_chain",
            "line": 126,
            "docstring": "Create RAG content generation chain using proper retrieval patterns"
          },
          {
            "name": "create_vectorization_chain",
            "line": 236,
            "docstring": "Create vectorization chain using native LangChain components"
          },
          {
            "name": "create_wordpress_publishing_chain",
            "line": 300,
            "docstring": "Create WordPress publishing chain using native LangChain components"
          },
          {
            "name": "create_output_formatting_chain",
            "line": 334,
            "docstring": "Create output formatting chain using native LangChain components"
          },
          {
            "name": "create_universal_casino_chain",
            "line": 378,
            "docstring": "Create the complete universal casino review chain using LCEL composition\n\nThis is the main chain that composes all components using | operators\naccording to LCEL best practices."
          },
          {
            "name": "get_universal_casino_chain",
            "line": 451,
            "docstring": "Get a configured universal casino review chain"
          },
          {
            "name": "setup_retriever_and_generate",
            "line": 129,
            "docstring": "Set up retriever and generate content using RAG"
          },
          {
            "name": "vectorize_content",
            "line": 255,
            "docstring": "Vectorize content using native SupabaseVectorStore"
          },
          {
            "name": "publish_to_wordpress",
            "line": 303,
            "docstring": "Publish to WordPress using native tools integration"
          },
          {
            "name": "format_output",
            "line": 337,
            "docstring": "Format final output according to schema"
          },
          {
            "name": "add_start_time",
            "line": 387,
            "docstring": "Add start time for processing time calculation"
          },
          {
            "name": "add_processing_time",
            "line": 397,
            "docstring": "Calculate and add processing time"
          }
        ],
        "imports": [
          "os",
          "typing",
          "langchain_core.documents",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "langchain_core.messages",
          "datetime",
          "langchain_core.output_parsers",
          "langchain_community.vectorstores.supabase",
          "langchain.retrievers",
          "asyncio",
          "pydantic",
          "supabase",
          "langchain_openai",
          "dotenv",
          "langchain_community.tools.tavily_search"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "wordpress_api",
          "tavily_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 491
      }
    ],
    "agents": [
      {
        "name": "research_ingestion_agent",
        "path": "src/agents/research_ingestion_agent.py",
        "category": "agent",
        "size": 21905,
        "last_modified": "2025-08-24T13:29:50",
        "module_docstring": "\ud83d\udd04 Research & Ingestion Agent LangGraph Node\nTask-007: Implement Planner \u2192 Retrieve \u2192 Loader pattern for comprehensive content ingestion\n\nUses LangChain native components:\n- LangGraph StateGraph for workflow orchestration\n- WebBaseLoader for web content extraction\n- RecursiveCharacterTextSplitter for intelligent chunking\n- AgenticSupabaseVectorStore for indexing with multi-tenant support\n- LCEL chains for data transformation and processing",
        "classes": [
          {
            "name": "ResearchPlan",
            "line": 36,
            "docstring": "Research plan with prioritized URLs and extraction strategy"
          },
          {
            "name": "ContentIngestionState",
            "line": 45,
            "docstring": "State for Research & Ingestion workflow"
          },
          {
            "name": "ResearchIngestionAgent",
            "line": 61,
            "docstring": "LangGraph-based Research & Ingestion Agent\nImplements Planner \u2192 Retrieve \u2192 Loader pattern with LCEL chains"
          }
        ],
        "functions": [
          {
            "name": "parse_planning_output",
            "line": 129,
            "docstring": "Parse LLM output into structured ResearchPlan"
          },
          {
            "name": "enrich_content",
            "line": 214,
            "docstring": "Enrich content with LLM analysis"
          }
        ],
        "imports": [
          "typing",
          "langchain_core.documents",
          "logging",
          "src.schemas.casino_intelligence_schema",
          "asyncio",
          "urllib.parse",
          "langchain_openai",
          "langchain_community.document_loaders",
          "langchain_core.prompts",
          "langchain.text_splitter",
          "typing_extensions",
          "langchain_core.runnables",
          "json",
          "src.schemas.review_doc",
          "datetime",
          "langchain_core.output_parsers",
          "src.integrations.supabase_vector_store",
          "langgraph.graph",
          "re",
          "pydantic"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "openai_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 537
      },
      {
        "name": "publishing_agent",
        "path": "src/agents/publishing_agent.py",
        "category": "agent",
        "size": 10784,
        "last_modified": "2025-08-23T23:26:13",
        "module_docstring": "\ud83d\udcdd Native LangChain Publishing Agent\nUsing WordPress tool with proper agent pattern (not LCEL tool calling)\n\nFollows LangChain best practice: Use agents for tools, chains for simple workflows",
        "classes": [
          {
            "name": "CasinoPublishingAgent",
            "line": 17,
            "docstring": "Native publishing agent using WordPress tool"
          }
        ],
        "functions": [
          {
            "name": "publish_review_sync",
            "line": 196,
            "docstring": "Synchronous version for easier integration"
          },
          {
            "name": "publish_casino_review",
            "line": 33,
            "docstring": "Publish casino review to WordPress with proper formatting and metadata"
          },
          {
            "name": "format_review_for_publishing",
            "line": 55,
            "docstring": "Format review content for WordPress publishing with metadata and images"
          }
        ],
        "imports": [
          "os",
          "typing",
          "langchain_core.prompts",
          "asyncio",
          "langchain_core.tools",
          "integrations.langchain_wordpress_tool",
          "langchain_openai",
          "langchain.agents"
        ],
        "features": [
          "lcel_composition",
          "prompt_templates",
          "supabase_integration",
          "openai_api",
          "wordpress_api",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 244
      },
      {
        "name": "native_casino_research_agent",
        "path": "src/agents/native_casino_research_agent.py",
        "category": "agent",
        "size": 7603,
        "last_modified": "2025-08-23T23:38:57",
        "module_docstring": "\ud83e\udd16 Native LangChain Casino Research Agent  \nPhase 1: Replace custom agent logic with create_tool_calling_agent\n\nUses official LangChain agent patterns:\n- create_tool_calling_agent for native agent creation\n- AgentExecutor for execution\n- Native tool integration\n- ChatPromptTemplate for agent prompts",
        "classes": [
          {
            "name": "NativeCasinoResearchAgent",
            "line": 19,
            "docstring": "Native LangChain casino research agent using create_tool_calling_agent"
          }
        ],
        "functions": [
          {
            "name": "research_casino_sync",
            "line": 130,
            "docstring": "Synchronous version for easier integration"
          },
          {
            "name": "get_available_tools",
            "line": 162,
            "docstring": "Get list of available native tools"
          }
        ],
        "imports": [
          "typing",
          "langchain_core.prompts",
          "asyncio",
          "langchain_openai",
          "tools.native_casino_research_tools",
          "langchain.agents"
        ],
        "features": [
          "prompt_templates",
          "openai_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 205
      },
      {
        "name": "research_agent",
        "path": "src/agents/research_agent.py",
        "category": "agent",
        "size": 6689,
        "last_modified": "2025-08-23T23:17:13",
        "module_docstring": "\ud83d\udd0d Native LangChain Research Agent\nUsing built-in tools and agent patterns (not custom web research)\n\nFollows LangChain best practice: Use agents for tools, chains for simple workflows",
        "classes": [
          {
            "name": "CasinoResearchAgent",
            "line": 18,
            "docstring": "Native research agent using built-in LangChain tools"
          }
        ],
        "functions": [
          {
            "name": "research_casino_sync",
            "line": 148,
            "docstring": "Synchronous version for easier integration"
          },
          {
            "name": "search_casino_info",
            "line": 33,
            "docstring": "Search for general casino information using web search"
          },
          {
            "name": "load_casino_website",
            "line": 52,
            "docstring": "Load and extract content from casino website"
          },
          {
            "name": "search_casino_reviews",
            "line": 70,
            "docstring": "Search for casino reviews and user feedback"
          }
        ],
        "imports": [
          "os",
          "typing",
          "langchain_core.prompts",
          "asyncio",
          "langchain_core.tools",
          "langchain_community.tools",
          "langchain_openai",
          "langchain.agents",
          "langchain_community.document_loaders"
        ],
        "features": [
          "prompt_templates",
          "openai_api",
          "tavily_api",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 186
      }
    ],
    "schemas": [
      {
        "name": "casino_intelligence_schema",
        "path": "src/schemas/casino_intelligence_schema.py",
        "category": "schema",
        "size": 42553,
        "last_modified": "2025-08-23T09:45:14",
        "module_docstring": "\ud83c\udfb0 COMPREHENSIVE CASINO INTELLIGENCE SCHEMA - 95 FIELDS\n====================================================\n\nEnterprise-grade Pydantic schemas for structured casino intelligence extraction\nSupporting Task 17.1: Design Comprehensive Pydantic Schemas for 95 Fields\n\nSCHEMA ORGANIZATION:\n- 6 Major Categories (Trustworthiness, Games, Bonuses, Payments, UX, Innovations)\n- 95 Total Fields with validation, documentation, and type safety\n- Backward compatibility with existing 14-field system\n- LangChain PydanticOutputParser integration ready\n\nAuthor: AI Assistant\nCreated: 2025-01-20\nVersion: 1.0.0",
        "classes": [
          {
            "name": "LicenseAuthority",
            "line": 30,
            "docstring": "Casino licensing authorities"
          },
          {
            "name": "CurrencyCode",
            "line": 52,
            "docstring": "Supported currencies"
          },
          {
            "name": "PaymentMethodType",
            "line": 73,
            "docstring": "Payment method categories"
          },
          {
            "name": "GameProvider",
            "line": 87,
            "docstring": "Major game software providers"
          },
          {
            "name": "DeviceType",
            "line": 111,
            "docstring": "Device compatibility types"
          },
          {
            "name": "SupportChannelType",
            "line": 121,
            "docstring": "Customer support channel types"
          },
          {
            "name": "CommissionModel",
            "line": 133,
            "docstring": "Commission models for affiliate programs"
          },
          {
            "name": "LicenseInformation",
            "line": 145,
            "docstring": "Detailed licensing information"
          },
          {
            "name": "SecurityFeatures",
            "line": 159,
            "docstring": "Security and protection measures"
          },
          {
            "name": "ReputationMetrics",
            "line": 171,
            "docstring": "Casino reputation and trust indicators"
          },
          {
            "name": "TrustworthinessCategory",
            "line": 183,
            "docstring": "CATEGORY 1: Trustworthiness & Safety (25 fields)"
          },
          {
            "name": "GamePortfolio",
            "line": 209,
            "docstring": "Game portfolio details"
          },
          {
            "name": "SoftwareProviders",
            "line": 225,
            "docstring": "Software provider information"
          },
          {
            "name": "GamesCategory",
            "line": 235,
            "docstring": "CATEGORY 2: Games & Software (20 fields)"
          },
          {
            "name": "WelcomeBonusDetails",
            "line": 257,
            "docstring": "Welcome bonus structure"
          },
          {
            "name": "BonusesCategory",
            "line": 270,
            "docstring": "CATEGORY 3: Bonuses & Promotions (15 fields)"
          },
          {
            "name": "PaymentMethod",
            "line": 289,
            "docstring": "Individual payment method details"
          },
          {
            "name": "PaymentsCategory",
            "line": 305,
            "docstring": "CATEGORY 4: Payments & Banking (15 fields)"
          },
          {
            "name": "CustomerSupport",
            "line": 330,
            "docstring": "Customer support details"
          },
          {
            "name": "UserExperienceCategory",
            "line": 341,
            "docstring": "CATEGORY 5: User Experience & Support (10 fields)"
          },
          {
            "name": "InnovationsCategory",
            "line": 357,
            "docstring": "CATEGORY 6: Innovations & Features (10 fields)"
          },
          {
            "name": "AffiliateCommissionDetails",
            "line": 379,
            "docstring": "Affiliate commission structure and terms"
          },
          {
            "name": "AffiliateMarketingRules",
            "line": 390,
            "docstring": "Rules and restrictions for affiliate marketing"
          },
          {
            "name": "AffiliatePaymentTerms",
            "line": 399,
            "docstring": "Payment terms for affiliates"
          },
          {
            "name": "AffiliateProgramIntelligenceCategory",
            "line": 406,
            "docstring": "CATEGORY 7: Affiliate Program Intelligence (15 fields)"
          },
          {
            "name": "TermsLicensingInfo",
            "line": 424,
            "docstring": "Licensing and regulatory information from T&C"
          },
          {
            "name": "TermsRestrictions",
            "line": 431,
            "docstring": "Geographic and user restrictions from T&C"
          },
          {
            "name": "TermsFinancialConditions",
            "line": 438,
            "docstring": "Financial terms and conditions"
          },
          {
            "name": "MTCasinoTaxonomies",
            "line": 450,
            "docstring": "MT Casino taxonomy classifications for WordPress theme integration"
          },
          {
            "name": "CoinFlipCasinoFields",
            "line": 496,
            "docstring": "CoinFlip theme specific casino fields for WordPress integration"
          },
          {
            "name": "TermsAndConditionsCategory",
            "line": 535,
            "docstring": "CATEGORY 8: Terms & Conditions Analysis (10 fields)"
          },
          {
            "name": "CasinoIntelligence",
            "line": 552,
            "docstring": "\ud83c\udfb0 COMPREHENSIVE CASINO INTELLIGENCE MODEL - 95 FIELDS\n====================================================\n\nComplete structured intelligence for casino analysis across 6 major categories:\n\n1. Trustworthiness & Safety (25 fields)\n2. Games & Software (20 fields) \n3. Bonuses & Promotions (15 fields)\n4. Payments & Banking (15 fields)\n5. User Experience & Support (10 fields)\n6. Innovations & Features (10 fields)\n7. Affiliate Program Intelligence (15 fields)\n\nTotal: 110 fields for comprehensive casino intelligence extraction"
          },
          {
            "name": "Config",
            "line": 787,
            "docstring": "Pydantic configuration"
          }
        ],
        "functions": [
          {
            "name": "create_empty_casino_intelligence",
            "line": 823,
            "docstring": "Create an empty CasinoIntelligence instance with basic info"
          },
          {
            "name": "merge_casino_intelligence",
            "line": 832,
            "docstring": "Merge two CasinoIntelligence instances, with update taking precedence"
          },
          {
            "name": "validate_casino_intelligence_schema",
            "line": 851,
            "docstring": "Validate the schema structure and return schema info"
          },
          {
            "name": "validate_license_status",
            "line": 154,
            "docstring": null
          },
          {
            "name": "legacy_casino_rating",
            "line": 653,
            "docstring": "Backward compatibility: Legacy casino rating"
          },
          {
            "name": "legacy_bonus_amount",
            "line": 658,
            "docstring": "Backward compatibility: Legacy bonus amount"
          },
          {
            "name": "legacy_license_info",
            "line": 663,
            "docstring": "Backward compatibility: Legacy license info"
          },
          {
            "name": "legacy_game_providers",
            "line": 676,
            "docstring": "Backward compatibility: Legacy game providers"
          },
          {
            "name": "legacy_payment_methods",
            "line": 681,
            "docstring": "Backward compatibility: Legacy payment methods"
          },
          {
            "name": "legacy_mobile_compatible",
            "line": 686,
            "docstring": "Backward compatibility: Legacy mobile compatibility"
          },
          {
            "name": "legacy_live_chat_support",
            "line": 691,
            "docstring": "Backward compatibility: Legacy live chat support"
          },
          {
            "name": "legacy_withdrawal_time",
            "line": 696,
            "docstring": "Backward compatibility: Legacy withdrawal time"
          },
          {
            "name": "legacy_min_deposit",
            "line": 701,
            "docstring": "Backward compatibility: Legacy minimum deposit"
          },
          {
            "name": "legacy_wagering_requirements",
            "line": 706,
            "docstring": "Backward compatibility: Legacy wagering requirements"
          },
          {
            "name": "validate_overall_consistency",
            "line": 716,
            "docstring": "Validate overall data consistency"
          },
          {
            "name": "validate_rating_range",
            "line": 731,
            "docstring": "Ensure ratings are within valid range"
          },
          {
            "name": "calculate_completeness_score",
            "line": 737,
            "docstring": "Calculate how complete this intelligence profile is (0-1)"
          },
          {
            "name": "to_legacy_format",
            "line": 768,
            "docstring": "Convert to legacy 14-field format for backward compatibility"
          },
          {
            "name": "deep_merge",
            "line": 838,
            "docstring": null
          },
          {
            "name": "count_fields",
            "line": 855,
            "docstring": null
          }
        ],
        "imports": [
          "re",
          "typing",
          "enum",
          "datetime",
          "pydantic"
        ],
        "features": [
          "wordpress_api",
          "publishing",
          "has_tests"
        ],
        "lines_of_code": 901
      },
      {
        "name": "review_doc",
        "path": "src/schemas/review_doc.py",
        "category": "schema",
        "size": 25443,
        "last_modified": "2025-08-24T10:05:53",
        "module_docstring": "\ud83c\udfb0 AGENTIC RAG CMS: REVIEW DOCUMENT & QA SCHEMAS\n===============================================\n\nComprehensive Pydantic schemas for the Agentic Multi-Tenant RAG CMS:\n- ReviewDoc: Complete structured output for generated content\n- QAReport: Compliance and quality validation results\n- Multi-tenant support with affiliate intelligence integration\n\nAuthor: AI Assistant & TaskMaster System  \nCreated: 2025-08-24\nTask: task-023 - Define ReviewDoc and QAReport Pydantic Schemas\nVersion: 2.0.0",
        "classes": [
          {
            "name": "ContentType",
            "line": 27,
            "docstring": "Content types for multi-domain support"
          },
          {
            "name": "QualityScore",
            "line": 37,
            "docstring": "Quality assessment levels"
          },
          {
            "name": "ComplianceStatus",
            "line": 46,
            "docstring": "Compliance validation status"
          },
          {
            "name": "PublishingStatus",
            "line": 54,
            "docstring": "Publishing workflow status"
          },
          {
            "name": "MediaAsset",
            "line": 68,
            "docstring": "Individual media asset information"
          },
          {
            "name": "VisualContent",
            "line": 81,
            "docstring": "Visual content and media assets"
          },
          {
            "name": "SEOMetadata",
            "line": 94,
            "docstring": "SEO optimization metadata"
          },
          {
            "name": "WordPressMetadata",
            "line": 110,
            "docstring": "WordPress-specific publishing metadata"
          },
          {
            "name": "TenantConfiguration",
            "line": 126,
            "docstring": "Tenant-specific configuration and branding"
          },
          {
            "name": "AffiliateIntelligence",
            "line": 141,
            "docstring": "Affiliate intelligence integration"
          },
          {
            "name": "ReviewDoc",
            "line": 154,
            "docstring": "\ud83c\udfb0 COMPREHENSIVE REVIEW DOCUMENT SCHEMA\n========================================\n\nComplete structured output for agentic content generation supporting:\n- Multi-tenant branding and localization\n- 95-field affiliate intelligence integration\n- World-class narrative content generation\n- SEO optimization and WordPress publishing\n- Compliance validation and quality control"
          },
          {
            "name": "QACheck",
            "line": 284,
            "docstring": "Individual QA check result"
          },
          {
            "name": "ContentQualityAssessment",
            "line": 294,
            "docstring": "Content quality assessment results"
          },
          {
            "name": "AffiliateComplianceAssessment",
            "line": 305,
            "docstring": "Affiliate compliance validation results"
          },
          {
            "name": "TechnicalQAAssessment",
            "line": 316,
            "docstring": "Technical quality assessment"
          },
          {
            "name": "QAReport",
            "line": 326,
            "docstring": "\ud83d\udd0d COMPREHENSIVE QA VALIDATION REPORT\n=====================================\n\nComplete quality assurance and compliance validation for generated content:\n- Content quality assessment\n- Affiliate compliance validation  \n- Technical quality checks\n- Multi-tenant compliance verification"
          }
        ],
        "functions": [
          {
            "name": "create_empty_review_doc",
            "line": 440,
            "docstring": "Create an empty ReviewDoc with basic tenant configuration"
          },
          {
            "name": "create_qa_report",
            "line": 472,
            "docstring": "Create a QA report for a ReviewDoc"
          },
          {
            "name": "validate_tenant_consistency",
            "line": 241,
            "docstring": "Ensure tenant configuration consistency"
          },
          {
            "name": "validate_content_quality",
            "line": 253,
            "docstring": "Validate content meets quality standards"
          },
          {
            "name": "calculate_word_count",
            "line": 260,
            "docstring": "Auto-calculate word count from body content"
          },
          {
            "name": "calculate_reading_time",
            "line": 272,
            "docstring": "Auto-calculate reading time (average 200 words per minute)"
          },
          {
            "name": "is_publishing_approved",
            "line": 386,
            "docstring": "Check if content is approved for publishing"
          },
          {
            "name": "get_blocking_issues",
            "line": 395,
            "docstring": "Get all issues that block publishing"
          },
          {
            "name": "calculate_improvement_score",
            "line": 406,
            "docstring": "Calculate how much improvement is needed to pass"
          },
          {
            "name": "validate_qa_consistency",
            "line": 414,
            "docstring": "Validate QA result consistency"
          }
        ],
        "imports": [
          "re",
          "typing",
          "casino_intelligence_schema",
          "enum",
          "datetime",
          "pydantic"
        ],
        "features": [
          "firecrawl_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "has_tests"
        ],
        "lines_of_code": 514
      }
    ],
    "pipelines": [
      {
        "name": "complete_viage_casino_pipeline",
        "path": "complete_viage_casino_pipeline.py",
        "category": "pipeline",
        "size": 24960,
        "last_modified": "2025-08-25T14:27:08.800092",
        "module_docstring": "\ud83c\udfb0 Complete Viage Casino Review Pipeline - Claude.md Compliant\n===========================================================\n\n100% Claude.md compliant pipeline for generating comprehensive 2500-word casino reviews\nusing native LangChain LCEL composition with proper tool architecture.\n\nPIPELINE STAGES:\n1. Research Agent: Comprehensive casino intelligence extraction\n2. Content Agent: 2500-word review generation with structured sections\n3. Image Agent: Casino screenshot extraction and upload\n4. Publishing Agent: WordPress publication with media integration\n\nCLAUDE.MD COMPLIANCE:\n\u2705 LangChain-Native Only: LCEL + ToolNode (no ad-hoc HTTP inside chains)\n\u2705 All I/O via /src/tools/* adapters (BaseTool implementations)\n\u2705 Deterministic Contracts: Pydantic v2 models for all inputs/outputs\n\u2705 Agent-First, Bounded: Tools are narrow and tool-aware\n\u2705 Pure LCEL composition with RunnableLambda for data processing only",
        "classes": [
          {
            "name": "ViageCasinoResearchInput",
            "line": 51,
            "docstring": "Pydantic v2 input schema for Viage Casino research"
          },
          {
            "name": "ViageCasinoReviewOutput",
            "line": 57,
            "docstring": "Pydantic v2 output schema for complete review generation"
          }
        ],
        "functions": [
          {
            "name": "research_viage_casino",
            "line": 69,
            "docstring": "STAGE 1: Research Agent - Extract comprehensive casino intelligence\nPure data processing: No HTTP calls - research simulation for demo"
          },
          {
            "name": "generate_viage_casino_review",
            "line": 121,
            "docstring": "STAGE 2: Content Agent - Generate comprehensive 2500-word review\nPure data processing: Transform research data into structured review content"
          },
          {
            "name": "extract_casino_images",
            "line": 243,
            "docstring": "STAGE 3: Image Agent - Extract casino screenshots using tools\nUses Google Images search tool for image extraction"
          },
          {
            "name": "download_casino_images",
            "line": 261,
            "docstring": "STAGE 4: Download casino images using tool"
          },
          {
            "name": "upload_images_to_wordpress",
            "line": 288,
            "docstring": "STAGE 5: Upload images to WordPress using tool"
          },
          {
            "name": "create_wordpress_post",
            "line": 316,
            "docstring": "STAGE 6: Create new WordPress post and update with content and images"
          },
          {
            "name": "format_final_results",
            "line": 352,
            "docstring": "STAGE 7: Format final pipeline results\nPure data processing: Create final output structure"
          },
          {
            "name": "create_viage_casino_pipeline",
            "line": 390,
            "docstring": "\ud83c\udfb0 Create complete Viage Casino review pipeline - 100% Claude.md compliant\n\nCOMPLIANCE ARCHITECTURE:\n- All external I/O via /src/tools/* adapters (BaseTool implementations)\n- RunnableLambda used ONLY for pure data processing (no HTTP)\n- ToolNode handles all external service calls via tool._run()\n- Pydantic v2 models for all inputs/outputs\n- Pure LCEL composition throughout"
          },
          {
            "name": "main",
            "line": 413,
            "docstring": "Execute the complete Viage Casino review pipeline"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.prompts",
          "langchain_core.runnables",
          "src.schemas.casino_intelligence_schema",
          "src.tools.wordpress_media_tool",
          "json",
          "datetime",
          "langchain_core.output_parsers",
          "src.tools.google_images_search_tool",
          "src.tools.image_download_tool",
          "pydantic",
          "pathlib",
          "langchain_openai",
          "src.tools.wordpress_post_update_tool"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "prompt_templates",
          "openai_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "has_tests"
        ],
        "lines_of_code": 464
      },
      {
        "name": "ccms_pipeline",
        "path": "ccms_pipeline.py",
        "category": "pipeline",
        "size": 38840,
        "last_modified": "2025-08-26T21:33:34.818690",
        "module_docstring": "\ud83c\udfb0 CCMS Production Pipeline - Claude.md Compliant\n==============================================\n\nNative LangChain LCEL pipeline for casino review generation.\nSingle declarative pipeline with Supabase-driven configuration.\n\nARCHITECTURE:\n- 100% Native LangChain/LCEL composition\n- All external I/O via /src/tools/* BaseTool implementations  \n- Config-driven via Supabase (no hardcoded values)\n- Compliance gates with fail-fast behavior\n- Complete observability and retry logic\n\nPIPELINE: config \u2192 research \u2192 content \u2192 (seo | media) \u2192 compliance \u2192 publish \u2192 metrics",
        "classes": [
          {
            "name": "CCMSInput",
            "line": 44,
            "docstring": "Input schema for CCMS pipeline"
          },
          {
            "name": "CCMSResult",
            "line": 53,
            "docstring": "Output schema for CCMS pipeline"
          },
          {
            "name": "ComplianceError",
            "line": 81,
            "docstring": "Exception raised when compliance checks fail"
          }
        ],
        "functions": [
          {
            "name": "resolve_config",
            "line": 89,
            "docstring": "Step 1: Resolve tenant configuration from Supabase\nUses config hierarchy: tenant_overrides > tenant_defaults > global_defaults"
          },
          {
            "name": "research_step",
            "line": 116,
            "docstring": "Step 2: Load OR collect comprehensive casino research\nUses existing research if available, otherwise runs research pipeline"
          },
          {
            "name": "content_step",
            "line": 226,
            "docstring": "Step 3: Generate structured content blocks from research + brand voice\nCRITICAL: Fails fast if no research data to prevent inaccurate content"
          },
          {
            "name": "seo_step",
            "line": 304,
            "docstring": "Step 4A: Create SEO metadata, JSON-LD schema, and optimization"
          },
          {
            "name": "media_step",
            "line": 382,
            "docstring": "Step 4B: Process media assets using Firecrawl screenshot capture"
          },
          {
            "name": "compliance_step",
            "line": 481,
            "docstring": "Step 5: Validate content compliance - BLOCKING GATE"
          },
          {
            "name": "publish_step",
            "line": 586,
            "docstring": "Step 6: Publish to WordPress with full SEO and ACF integration"
          },
          {
            "name": "postpublish_step",
            "line": 679,
            "docstring": "Step 7: Record metrics and quality scores to Supabase"
          },
          {
            "name": "format_final_results",
            "line": 702,
            "docstring": "Step 8: Format final pipeline output"
          },
          {
            "name": "add_start_time",
            "line": 748,
            "docstring": null
          },
          {
            "name": "merge_parallel_results",
            "line": 755,
            "docstring": "Merge results from parallel seo and media chains"
          },
          {
            "name": "run_ccms_pipeline",
            "line": 791,
            "docstring": "Execute the complete CCMS pipeline\n\nArgs:\n    tenant_slug: Tenant identifier (e.g., 'crashcasino')\n    casino_slug: Casino identifier (e.g., 'viage')\n    locale: Locale code (e.g., 'en-GB')\n    run_id: Optional run identifier (auto-generated if not provided)\n    dry_run: Preview mode - no publishing\n    skip_compliance: Skip compliance gates (DANGEROUS)\n\nReturns:\n    Complete pipeline results with all artifacts and metrics"
          }
        ],
        "imports": [
          "os",
          "typing",
          "logging",
          "src.chains.native_universal_rag_lcel",
          "langchain_core.runnables",
          "asyncio",
          "datetime",
          "src.schemas.review_doc",
          "src.tools.placeholder_image_generator",
          "src.tools.wordpress_enhanced_publisher",
          "src.tools.firecrawl_screenshot_tool",
          "src.tools.comprehensive_content_generator",
          "pydantic",
          "uuid",
          "src.tools.real_supabase_config_tool",
          "src.tools.real_supabase_research_tool",
          "src.chains.narrative_generation_lcel",
          "time"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "supabase_integration",
          "vector_store",
          "firecrawl_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "production_ready"
        ],
        "lines_of_code": 869
      },
      {
        "name": "run_betfirst_production_pipeline",
        "path": "run_betfirst_production_pipeline.py",
        "category": "pipeline",
        "size": 2000,
        "last_modified": "2025-08-26T17:22:31.055097",
        "module_docstring": "\ud83c\udfb0 BETFIRST CASINO - COMPLETE PRODUCTION PIPELINE\n================================================\nComplete production pipeline for BetFirst casino with 2500+ word review generation\nand WordPress publishing using all integrated components.\n\nFeatures:\n- Native LangChain LCEL composition\n- Comprehensive 95+ field research\n- Professional 2500+ word content generation\n- Firecrawl V1 screenshot capture\n- WordPress publishing with SEO optimization\n- Multi-tenant configuration",
        "classes": [],
        "functions": [],
        "imports": [
          "ccms_pipeline",
          "sys",
          "asyncio",
          "pathlib"
        ],
        "features": [
          "lcel_composition",
          "firecrawl_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 63
      },
      {
        "name": "test_ccms_pipeline",
        "path": "test_ccms_pipeline.py",
        "category": "pipeline",
        "size": 7789,
        "last_modified": "2025-08-25T18:04:57.064106",
        "module_docstring": "\ud83e\uddea CCMS Pipeline Test Suite\n==========================\n\nTest the complete native LangChain pipeline end-to-end.",
        "classes": [
          {
            "name": "TestCCMSPipeline",
            "line": 21,
            "docstring": null
          }
        ],
        "functions": [
          {
            "name": "test_pipeline_input_schema",
            "line": 23,
            "docstring": "Test CCMSInput schema validation"
          },
          {
            "name": "test_pipeline_result_schema",
            "line": 38,
            "docstring": "Test CCMSResult schema validation"
          },
          {
            "name": "test_dry_run_pipeline",
            "line": 59,
            "docstring": "Test pipeline execution in dry-run mode"
          },
          {
            "name": "test_compliance_failure_blocking",
            "line": 119,
            "docstring": "Test that compliance failures block the pipeline"
          },
          {
            "name": "test_compliance_skip_flag",
            "line": 158,
            "docstring": "Test that --skip-compliance bypasses blocking compliance errors"
          },
          {
            "name": "test_pipeline_lcel_composition",
            "line": 195,
            "docstring": "Test that the pipeline is properly composed with LCEL"
          },
          {
            "name": "test_compliance_error_exception",
            "line": 207,
            "docstring": "Test ComplianceError exception behavior"
          }
        ],
        "imports": [
          "ccms_pipeline",
          "logging",
          "langchain_core.runnables",
          "unittest.mock",
          "pytest"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "supabase_integration",
          "wordpress_api",
          "research_functionality",
          "publishing",
          "has_tests"
        ],
        "lines_of_code": 216
      },
      {
        "name": "universal_casino_pipeline",
        "path": "universal_casino_pipeline.py",
        "category": "pipeline",
        "size": 13665,
        "last_modified": "2025-08-22T19:46:31",
        "module_docstring": "\ud83c\udfb0 UNIVERSAL CASINO REVIEW PIPELINE - NATIVE LANGCHAIN\n========================================================\n\nUniversal pipeline that can generate comprehensive casino reviews for ANY casino\nusing ONLY native LangChain LCEL components as per CLAUDE.md requirements:\n\n1. \u2705 LCEL everywhere (| composition with Runnable*, ChatPromptTemplate)\n2. \u2705 No custom orchestration (no raw asyncio.gather, no raw HTTP)  \n3. \u2705 Schema-First (inputs/outputs in /src/schemas)\n4. \u2705 External services only via /src/tools/*\n\nUsage Examples:\n- python universal_casino_pipeline.py \"Mr Vegas Casino\"\n- python universal_casino_pipeline.py \"Betway Casino\" \n- python universal_casino_pipeline.py \"LeoVegas Casino\"\n- python universal_casino_pipeline.py \"888 Casino\"",
        "classes": [
          {
            "name": "UniversalCasinoPipeline",
            "line": 35,
            "docstring": "Universal pipeline for generating casino reviews using native LangChain components\n\nFeatures:\n- Pure LCEL pipeline composition (| operators)\n- 95-field individual casino research  \n- DataForSEO casino detection system\n- Supabase vectorization with native components\n- WordPress publishing via native tools\n- Revolutionary image detection algorithm"
          }
        ],
        "functions": [],
        "imports": [
          "os",
          "typing",
          "json",
          "asyncio",
          "datetime",
          "sys",
          "pathlib",
          "chains.native_universal_rag_lcel",
          "argparse"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "wordpress_api",
          "tavily_api",
          "research_functionality",
          "publishing",
          "async_support"
        ],
        "lines_of_code": 365
      },
      {
        "name": "complete_betway_research_pipeline",
        "path": "complete_betway_research_pipeline.py",
        "category": "pipeline",
        "size": 22745,
        "last_modified": "2025-08-26T09:05:44.995847",
        "module_docstring": "\ud83d\udd0d Complete Betway Casino Research Pipeline\n==========================================\n\nFull production research pipeline that:\n1. Conducts web research on Betway Casino\n2. Extracts comprehensive casino intelligence\n3. Stores data in Supabase\n4. Creates vector embeddings\n5. Generates comprehensive review\n6. Publishes to WordPress",
        "classes": [
          {
            "name": "BetwayResearchPipeline",
            "line": 48,
            "docstring": "Complete Betway Casino research and content generation pipeline"
          }
        ],
        "functions": [
          {
            "name": "extract_casino_intelligence",
            "line": 108,
            "docstring": "Step 2: Extract structured casino intelligence from research"
          },
          {
            "name": "store_research_data",
            "line": 209,
            "docstring": "Step 3: Store research data and intelligence in Supabase"
          },
          {
            "name": "vectorize_and_embed",
            "line": 340,
            "docstring": "Step 4: Create vector embeddings and store in Supabase"
          },
          {
            "name": "generate_comprehensive_review",
            "line": 368,
            "docstring": "Step 5: Generate comprehensive casino review using research data"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "asyncio",
          "dotenv",
          "langchain_openai",
          "langchain_community.document_loaders",
          "langchain_core.prompts",
          "traceback",
          "langchain.text_splitter",
          "supabase",
          "langchain_core.runnables",
          "langchain_community.vectorstores",
          "json",
          "datetime",
          "langchain_core.output_parsers",
          "sys",
          "langchain_community.tools.tavily_search",
          "os",
          "langchain.schema"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "wordpress_api",
          "tavily_api",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 504
      },
      {
        "name": "fixed_ccms_pipeline_with_research",
        "path": "fixed_ccms_pipeline_with_research.py",
        "category": "pipeline",
        "size": 15315,
        "last_modified": "2025-08-26T20:33:00.271618",
        "module_docstring": "\ud83c\udfb0 FIXED CCMS Pipeline - WITH COMPREHENSIVE RESEARCH COLLECTION\n==============================================================\n\nThis fixes the critical issue where the production pipeline was only LOADING \nresearch from Supabase but never COLLECTING new research data.\n\nFIXED PIPELINE FLOW:\n1. Config Resolution \u2705\n2. Research Collection \u2705 NEW - Uses WebResearchChain + ComprehensiveResearchChain\n3. Research Storage \u2705 NEW - Stores 95+ fields in Supabase\n4. Content Generation \u2705 - Now uses REAL research data\n5. Media Processing \u2705\n6. Publishing \u2705\n\nCOMPONENTS INTEGRATED:\n- WebResearchChain: WebBaseLoader for live data collection\n- ComprehensiveResearchChain: 95+ field structured extraction\n- Supabase Storage: Persistent research data for future use",
        "classes": [
          {
            "name": "FixedCCMSInput",
            "line": 53,
            "docstring": "Input schema for fixed CCMS pipeline with research collection"
          },
          {
            "name": "FixedCCMSResult",
            "line": 63,
            "docstring": "Result schema for fixed CCMS pipeline"
          }
        ],
        "functions": [
          {
            "name": "config_step",
            "line": 85,
            "docstring": "Step 1: Resolve tenant configuration"
          },
          {
            "name": "research_collection_step",
            "line": 107,
            "docstring": "Step 2: COLLECT comprehensive casino research using native LangChain components\nThis is the MISSING STEP that was causing the pipeline to fail"
          },
          {
            "name": "content_step_with_research",
            "line": 201,
            "docstring": "Step 3: Generate content using REAL research data"
          },
          {
            "name": "run_fixed_ccms_pipeline",
            "line": 231,
            "docstring": "Execute the FIXED CCMS pipeline with comprehensive research collection"
          }
        ],
        "imports": [
          "os",
          "typing",
          "tools.firecrawl_screenshot_tool",
          "logging",
          "langchain_core.runnables",
          "chains.web_research_chain",
          "datetime",
          "chains.comprehensive_research_chain",
          "sys",
          "pydantic",
          "uuid",
          "tools.placeholder_image_generator",
          "tools.comprehensive_content_generator",
          "time",
          "tools.real_supabase_config_tool",
          "tools.wordpress_enhanced_publisher",
          "tools.real_supabase_research_tool"
        ],
        "features": [
          "langchain_runnable",
          "supabase_integration",
          "firecrawl_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 373
      },
      {
        "name": "viage_casino_2500_word_pipeline",
        "path": "viage_casino_2500_word_pipeline.py",
        "category": "pipeline",
        "size": 33946,
        "last_modified": "2025-08-25T14:32:02.485422",
        "module_docstring": "\ud83c\udfb0 Viage Casino 2500-Word Review Pipeline - Claude.md Compliant\n============================================================\n\nComplete pipeline for generating comprehensive 2500-word Viage Casino review\nwith proper WordPress post creation and image integration.\n\nPIPELINE ENHANCED FEATURES:\n- Full 2500-word comprehensive review generation\n- Proper WordPress post creation (not just updates)\n- Real casino image extraction and integration\n- Complete Claude.md compliance with tool architecture",
        "classes": [
          {
            "name": "ViageCasinoFullPipelineOutput",
            "line": 38,
            "docstring": "Output schema for complete Viage Casino pipeline"
          }
        ],
        "functions": [
          {
            "name": "generate_comprehensive_viage_review",
            "line": 55,
            "docstring": "Generate comprehensive 2500-word Viage Casino review"
          },
          {
            "name": "extract_viage_images",
            "line": 284,
            "docstring": "Extract Viage Casino images using tool"
          },
          {
            "name": "download_viage_images",
            "line": 298,
            "docstring": "Download extracted images using tool"
          },
          {
            "name": "upload_viage_images",
            "line": 321,
            "docstring": "Upload images to WordPress using tool"
          },
          {
            "name": "create_wordpress_post_with_content",
            "line": 345,
            "docstring": "Create WordPress post with full content using tool"
          },
          {
            "name": "format_final_pipeline_results",
            "line": 391,
            "docstring": "Format final pipeline results"
          },
          {
            "name": "create_complete_viage_pipeline",
            "line": 432,
            "docstring": "Create complete Viage Casino 2500-word review pipeline\n100% Claude.md compliant with proper tool architecture"
          },
          {
            "name": "main",
            "line": 447,
            "docstring": "Execute the complete Viage Casino 2500-word review pipeline"
          }
        ],
        "imports": [
          "typing",
          "logging",
          "langchain_core.runnables",
          "src.tools.wordpress_media_tool",
          "datetime",
          "src.tools.google_images_search_tool",
          "src.tools.image_download_tool",
          "src.tools.wordpress_post_creation_tool",
          "pydantic",
          "pathlib"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "has_tests"
        ],
        "lines_of_code": 496
      },
      {
        "name": "run_trustdice_mt_casino_fixed",
        "path": "run_trustdice_mt_casino_fixed.py",
        "category": "pipeline",
        "size": 7424,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 TRUSTDICE MT CASINO WORDPRESS PUBLISHING - WITH FIXED ASYNC CONTEXT MANAGER\nUniversal RAG CMS v6.1 - Using LangChain Best Practices + Fixed WordPress Publishing\n\nThis script uses the corrected WordPress publishing logic that properly handles\nthe async context manager for WordPressRESTPublisher.",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 167
      },
      {
        "name": "run_production_betway_comprehensive_research",
        "path": "run_production_betway_comprehensive_research.py",
        "category": "pipeline",
        "size": 11682,
        "last_modified": "2025-08-26T15:52:13.165082",
        "module_docstring": "\ud83c\udfaf PRODUCTION BETWAY RESEARCH - NATIVE LANGCHAIN COMPREHENSIVE SYSTEM\n=====================================================================\n\nUses the existing efficient LangChain native research system found in the codebase:\n- src/chains/native_universal_rag_lcel.py (Universal RAG with 95+ fields)\n- src/chains/comprehensive_research_chain.py (Structured field extraction)\n- Real Supabase Research Tool integration\n- Native LCEL composition patterns\n\nThis represents the WORKING efficient research system that was requested.",
        "classes": [],
        "functions": [],
        "imports": [
          "typing",
          "logging",
          "asyncio",
          "datetime",
          "traceback",
          "chains.comprehensive_research_chain",
          "sys",
          "pathlib",
          "chains.native_universal_rag_lcel",
          "tools.real_supabase_research_tool"
        ],
        "features": [
          "langchain_runnable",
          "lcel_composition",
          "parallel_execution",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "wordpress_api",
          "tavily_api",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 244
      },
      {
        "name": "run_coinflip_mt_casino_demo",
        "path": "run_coinflip_mt_casino_demo.py",
        "category": "pipeline",
        "size": 11170,
        "last_modified": "2025-08-22T09:01:53",
        "module_docstring": "\ud83c\udfb0 COINFLIP MT CASINO DEMO - Enhanced Publishing Test\n====================================================\n\nDemonstrates the enhanced Coinflip MT Casino publisher with:\n- Intelligent content type detection (mt_listing, mt_bonus, mt_slots, mt_reviews)\n- 95-field casino intelligence mapping to MT Casino custom fields\n- Graceful fallback to regular posts with MT Casino styling\n- Comprehensive results tracking and analysis\n\nAuthor: AI Assistant\nCreated: 2025-01-23",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "integrations.coinflip_mt_casino_publisher",
          "schemas.casino_intelligence_schema",
          "time"
        ],
        "features": [
          "supabase_integration",
          "wordpress_api",
          "publishing",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 258
      },
      {
        "name": "run_complete_rag",
        "path": "run_complete_rag.py",
        "category": "pipeline",
        "size": 6041,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": null,
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "dotenv"
        ],
        "features": [
          "supabase_integration",
          "vector_store",
          "embeddings",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 132
      },
      {
        "name": "run_888_review",
        "path": "run_888_review.py",
        "category": "pipeline",
        "size": 2220,
        "last_modified": "2025-06-27T08:57:58",
        "module_docstring": "Run 888 Casino Review with Native LangChain Hub LCEL\n==================================================\n\nTest the Universal RAG LCEL chain with native hub integration for 888 Casino review.",
        "classes": [],
        "functions": [],
        "imports": [
          "chains.universal_rag_lcel",
          "traceback",
          "asyncio",
          "sys",
          "pathlib"
        ],
        "features": [
          "lcel_composition",
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 70
      },
      {
        "name": "run_betway_with_wordpress",
        "path": "run_betway_with_wordpress.py",
        "category": "pipeline",
        "size": 4451,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 BETWAY CASINO WITH WORDPRESS INTEGRATION\nUniversal RAG CMS v6.0 - Complete chain with WordPress publishing\n\nFEATURES TESTED:\n\u2705 Complete 95-field casino analysis framework\n\u2705 WordPress integration with crashcasino.io credentials\n\u2705 Fixed bulletproof image uploader\n\u2705 Major casino review sites research\n\u2705 Professional content generation\n\u2705 WordPress publishing to crashcasino.io",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "asyncio",
          "datetime",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 108
      },
      {
        "name": "run_betway_direct_test",
        "path": "run_betway_direct_test.py",
        "category": "pipeline",
        "size": 6218,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 BETWAY CASINO DIRECT TEST - NO CACHE\nUniversal RAG CMS v6.0 - Clear cache and target Betway specifically\n\nFEATURES TO VERIFY:\n\u2705 Casino detection logic\n\u2705 95-field analysis framework \n\u2705 Fixed image uploader\n\u2705 Major casino review sites research\n\u2705 Comprehensive WebBaseLoader integration",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 158
      },
      {
        "name": "run_optimized_betway_research",
        "path": "run_optimized_betway_research.py",
        "category": "pipeline",
        "size": 11211,
        "last_modified": "2025-08-26T15:48:39.821100",
        "module_docstring": "\ud83d\ude80 BETWAY CASINO - OPTIMIZED RESEARCH PIPELINE EXECUTION\n=======================================================\n\nProduction execution of the optimized 95+ datafield research system for Betway Casino.\nCombines existing working modules with LangChain efficiency patterns.\n\nFeatures:\n- Real Supabase Research Tool integration\n- Enhanced Multi-Query Retrieval with EnsembleRetriever\n- Comprehensive 95+ field intelligence extraction\n- Vector storage and indexing for future retrieval\n- Full LCEL compliance throughout the pipeline\n\nClaude.md Compliant Implementation",
        "classes": [],
        "functions": [
          {
            "name": "main",
            "line": 236,
            "docstring": "Main execution function"
          }
        ],
        "imports": [
          "os",
          "logging",
          "asyncio",
          "datetime",
          "src.chains.optimized_research_pipeline",
          "src.schemas.review_doc",
          "sys",
          "pathlib"
        ],
        "features": [
          "lcel_composition",
          "supabase_integration",
          "vector_store",
          "embeddings",
          "openai_api",
          "firecrawl_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 269
      },
      {
        "name": "run_full_native_rag",
        "path": "run_full_native_rag.py",
        "category": "pipeline",
        "size": 25916,
        "last_modified": "2025-08-22T09:48:57",
        "module_docstring": "Complete Native LangChain Universal RAG Implementation\n====================================================\n\nRuns the FULL native LangChain implementation with ALL components:\n- Multiple vector stores (FAISS, Chroma, Redis, Supabase)\n- All retrievers (Multi-query, Compression, Ensemble)\n- 95-field casino intelligence schema extraction\n- Web search integration (Tavily)\n- Semantic caching (Redis)\n- LCEL pipeline with | operator\n- Comprehensive knowledge base processing",
        "classes": [],
        "functions": [
          {
            "name": "create_comprehensive_betway_knowledge_base",
            "line": 33,
            "docstring": "Create extensive Betway Casino knowledge base with 95+ data points"
          }
        ],
        "imports": [
          "os",
          "typing",
          "logging",
          "langchain_core.documents",
          "asyncio",
          "traceback",
          "datetime",
          "langchain_text_splitters",
          "sys",
          "pathlib",
          "chains.native_universal_rag_lcel"
        ],
        "features": [
          "lcel_composition",
          "prompt_templates",
          "supabase_integration",
          "vector_store",
          "openai_api",
          "tavily_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 588
      },
      {
        "name": "run_bitcasino_mt_casino_simple",
        "path": "run_bitcasino_mt_casino_simple.py",
        "category": "pipeline",
        "size": 8376,
        "last_modified": "2025-08-22T09:01:53",
        "module_docstring": "SIMPLIFIED Bitcasino \u2192 MT Casino Publishing\nBypasses hanging web search, focuses on WordPress publishing",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "integrations.wordpress_publisher",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 184
      },
      {
        "name": "run_betfirst_production_pipeline",
        "path": "run_betfirst_production_pipeline.py",
        "category": "pipeline",
        "size": 2000,
        "last_modified": "2025-08-26T17:22:31.055097",
        "module_docstring": "\ud83c\udfb0 BETFIRST CASINO - COMPLETE PRODUCTION PIPELINE\n================================================\nComplete production pipeline for BetFirst casino with 2500+ word review generation\nand WordPress publishing using all integrated components.\n\nFeatures:\n- Native LangChain LCEL composition\n- Comprehensive 95+ field research\n- Professional 2500+ word content generation\n- Firecrawl V1 screenshot capture\n- WordPress publishing with SEO optimization\n- Multi-tenant configuration",
        "classes": [],
        "functions": [],
        "imports": [
          "ccms_pipeline",
          "sys",
          "asyncio",
          "pathlib"
        ],
        "features": [
          "lcel_composition",
          "firecrawl_api",
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready"
        ],
        "lines_of_code": 63
      },
      {
        "name": "run_trustdice_wordpress_complete",
        "path": "run_trustdice_wordpress_complete.py",
        "category": "pipeline",
        "size": 6870,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 TRUSTDICE CASINO COMPLETE WORDPRESS INTEGRATION\nUniversal RAG CMS v6.1 - Full WordPress Publishing with MT Casino Integration\n\nWORKING PATTERN FROM BETWAY SUCCESS:\n\u2705 Complete 95-field casino analysis framework\n\u2705 WordPress credentials from memory (working app password)\n\u2705 Fixed bulletproof image uploader (V1 patterns)\n\u2705 MT Casino custom post types and taxonomies\n\u2705 Professional content generation\n\u2705 WordPress publishing to crashcasino.io (LIVE)",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 148
      },
      {
        "name": "run_trustdice_final_fix",
        "path": "run_trustdice_final_fix.py",
        "category": "pipeline",
        "size": 6423,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 TRUSTDICE CASINO - FINAL WORDPRESS PUBLISHING FIX\nBypass flag propagation issues by running generation and WordPress publishing separately",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "integrations.wordpress_publisher",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 160
      },
      {
        "name": "run_betway_wordpress_complete",
        "path": "run_betway_wordpress_complete.py",
        "category": "pipeline",
        "size": 6384,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 BETWAY CASINO COMPLETE WORDPRESS INTEGRATION\nUniversal RAG CMS v6.0 - Full WordPress Publishing Test\n\nFINAL INTEGRATION:\n\u2705 Complete 95-field casino analysis framework\n\u2705 WordPress credentials from memory (working app password)\n\u2705 Fixed bulletproof image uploader (V1 patterns)\n\u2705 Major casino review sites research\n\u2705 Professional content generation\n\u2705 WordPress publishing to crashcasino.io (LIVE)",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 148
      },
      {
        "name": "run_crashino_production",
        "path": "run_crashino_production.py",
        "category": "pipeline",
        "size": 8498,
        "last_modified": "2025-06-25T18:18:34",
        "module_docstring": "\ud83c\udfb0 CRASHINO PRODUCTION CHAIN TEST\nTesting the integrated default Universal RAG Chain for Crashino casino review\nAll WordPress publishing fixes should work out-of-the-box",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 200
      },
      {
        "name": "run_crashino_content_only",
        "path": "run_crashino_content_only.py",
        "category": "pipeline",
        "size": 8224,
        "last_modified": "2025-06-25T18:19:19",
        "module_docstring": "\ud83c\udfb0 CRASHINO CONTENT GENERATION - PRODUCTION CHAIN DEMO\nTesting the Universal RAG Chain for Crashino casino review content generation\nDemonstrates all capabilities except WordPress publishing (no auth needed)",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 193
      },
      {
        "name": "run_bitcasino_wordpress_complete",
        "path": "run_bitcasino_wordpress_complete.py",
        "category": "pipeline",
        "size": 7254,
        "last_modified": "2025-08-22T09:01:53",
        "module_docstring": "Enhanced Bitcasino review with MT Casino publishing\nUses your superior Universal RAG CMS + MT Casino integration",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "integrations.wordpress_publisher",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "wordpress_api",
          "tavily_api",
          "research_functionality",
          "publishing",
          "async_support"
        ],
        "lines_of_code": 158
      },
      {
        "name": "run_betway_casino_specific",
        "path": "run_betway_casino_specific.py",
        "category": "pipeline",
        "size": 5933,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 BETWAY CASINO SPECIFIC CHAIN EXECUTION\nUniversal RAG CMS v6.0 - Focused Casino Analysis\n\nTARGETING SPECIFIC FEATURES:\n\u2705 Casino detection logic triggers\n\u2705 Major casino review sites research\n\u2705 95-field casino analysis framework\n\u2705 Fixed image uploader with V1 patterns\n\u2705 Casino-specific template selection",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "research_functionality",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 182
      },
      {
        "name": "run_betsson_lcel_chain",
        "path": "run_betsson_lcel_chain.py",
        "category": "pipeline",
        "size": 8659,
        "last_modified": "2025-06-27T07:54:57",
        "module_docstring": "Production LCEL Chain Test for Betsson Casino Review\nUsing the complete Universal RAG Chain with all advanced features enabled.\n\nFeatures Enabled:\n\u2705 Native LangChain Redis Semantic Caching \n\u2705 Enhanced Confidence Scoring (4-factor assessment)\n\u2705 Template System v2.0 (Local Hub pattern)\n\u2705 Comprehensive Web Research (95-field casino analysis)\n\u2705 Screenshot Evidence Capture\n\u2705 DataForSEO Image Integration\n\u2705 WordPress Auto-Publishing\n\u2705 FTI Content Processing\n\u2705 Security & Monitoring\n\u2705 All Native LCEL Patterns",
        "classes": [],
        "functions": [],
        "imports": [
          "logging",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "src.chains.universal_rag_lcel",
          "pathlib",
          "time"
        ],
        "features": [
          "lcel_composition",
          "vector_store",
          "wordpress_api",
          "tavily_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 210
      },
      {
        "name": "run_arrise_casino_review",
        "path": "run_arrise_casino_review.py",
        "category": "pipeline",
        "size": 12336,
        "last_modified": "2025-08-23T12:40:55",
        "module_docstring": "Complete pipeline test: Generate comprehensive Arrise Casino review with images and taxonomies",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "chains.universal_rag_lcel",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "pathlib"
        ],
        "features": [
          "wordpress_api",
          "screenshot_capture",
          "research_functionality",
          "publishing",
          "async_support",
          "has_tests"
        ],
        "lines_of_code": 289
      },
      {
        "name": "run_complete_betway_chain",
        "path": "run_complete_betway_chain.py",
        "category": "pipeline",
        "size": 9866,
        "last_modified": "2025-06-25T15:03:23",
        "module_docstring": "\ud83c\udfb0 COMPLETE BETWAY CASINO CHAIN EXECUTION\nUniversal RAG CMS v6.0 - Full Integration Test with Fixed Image Uploader\n\nFEATURES TESTED:\n\u2705 Complete 95-field casino analysis framework\n\u2705 Major casino review sites integration (6 authorities)\n\u2705 Fixed bulletproof image uploader (V1 patterns)\n\u2705 Enhanced context integration with structured data\n\u2705 Casino-specific template selection\n\u2705 Professional content generation\n\u2705 Performance tracking and confidence scoring",
        "classes": [],
        "functions": [],
        "imports": [
          "os",
          "typing",
          "chains.universal_rag_lcel",
          "json",
          "asyncio",
          "datetime",
          "traceback",
          "sys",
          "time"
        ],
        "features": [
          "tavily_api",
          "research_functionality",
          "async_support",
          "production_ready",
          "has_tests"
        ],
        "lines_of_code": 277
      }
    ],
    "configs": [
      {
        "name": ".env.production",
        "path": ".env.production",
        "type": "environment",
        "size": 1199,
        "last_modified": "2025-08-26T08:42:57.723312"
      },
      {
        "name": ".env",
        "path": ".env",
        "type": "environment",
        "size": 2811,
        "last_modified": "2025-08-26T16:24:47.130115"
      },
      {
        "name": ".env.ccms.example",
        "path": ".env.ccms.example",
        "type": "environment",
        "size": 1845,
        "last_modified": "2025-08-25T18:07:55.760465"
      },
      {
        "name": ".env.example",
        "path": ".env.example",
        "type": "environment",
        "size": 2743,
        "last_modified": "2025-08-26T16:21:03.644363"
      },
      {
        "name": "dataforseo_demo_results_20250615_154301.json",
        "path": "dataforseo_demo_results_20250615_154301.json",
        "type": "config",
        "size": 583494,
        "last_modified": "2025-06-15T15:43:01"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_132455.json",
        "path": "trustdice_mt_casino_fixed_20250624_132455.json",
        "type": "config",
        "size": 10126,
        "last_modified": "2025-06-24T13:24:55"
      },
      {
        "name": "bwin_casino_production_20250625_194500.json",
        "path": "bwin_casino_production_20250625_194500.json",
        "type": "config",
        "size": 21261,
        "last_modified": "2025-06-25T19:45:00"
      },
      {
        "name": "trustdice_complete_chain_results_20250624_100700.json",
        "path": "trustdice_complete_chain_results_20250624_100700.json",
        "type": "config",
        "size": 13082,
        "last_modified": "2025-06-24T10:07:00"
      },
      {
        "name": "betsson_production_lcel_20250627_080727.json",
        "path": "betsson_production_lcel_20250627_080727.json",
        "type": "config",
        "size": 33718,
        "last_modified": "2025-06-27T08:07:27"
      },
      {
        "name": "mcp_config.json",
        "path": "mcp_config.json",
        "type": "config",
        "size": 182,
        "last_modified": "2025-06-12T13:37:11"
      },
      {
        "name": "bitcasino_complete_chain_results_20250623_080952.json",
        "path": "bitcasino_complete_chain_results_20250623_080952.json",
        "type": "config",
        "size": 13535,
        "last_modified": "2025-06-23T08:09:52"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_143424.json",
        "path": "trustdice_mt_casino_fixed_20250624_143424.json",
        "type": "config",
        "size": 9909,
        "last_modified": "2025-06-24T14:34:24"
      },
      {
        "name": "bwin_casino_production_20250625_194832.json",
        "path": "bwin_casino_production_20250625_194832.json",
        "type": "config",
        "size": 21553,
        "last_modified": "2025-06-25T19:48:32"
      },
      {
        "name": "trustdice_complete_chain_results_20250624_122451.json",
        "path": "trustdice_complete_chain_results_20250624_122451.json",
        "type": "config",
        "size": 13100,
        "last_modified": "2025-06-24T12:24:51"
      },
      {
        "name": "bitcasino_complete_chain_results_20250623_075143.json",
        "path": "bitcasino_complete_chain_results_20250623_075143.json",
        "type": "config",
        "size": 13718,
        "last_modified": "2025-06-23T07:51:43"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_131645.json",
        "path": "trustdice_mt_casino_fixed_20250624_131645.json",
        "type": "config",
        "size": 9964,
        "last_modified": "2025-06-24T13:16:45"
      },
      {
        "name": "betway_complete_chain_results_20250621_124810.json",
        "path": "betway_complete_chain_results_20250621_124810.json",
        "type": "config",
        "size": 13820,
        "last_modified": "2025-06-21T12:48:10"
      },
      {
        "name": "betway_research_data.json",
        "path": "betway_research_data.json",
        "type": "config",
        "size": 2695,
        "last_modified": "2025-06-20T20:23:09"
      },
      {
        "name": "v1_migration_analysis.json",
        "path": "v1_migration_analysis.json",
        "type": "config",
        "size": 16223,
        "last_modified": "2025-06-17T09:43:39"
      },
      {
        "name": "dataforseo_demo_results_20250615_153026.json",
        "path": "dataforseo_demo_results_20250615_153026.json",
        "type": "config",
        "size": 428,
        "last_modified": "2025-06-15T15:30:26"
      },
      {
        "name": "trustdice_wordpress_published_20250624_114341.json",
        "path": "trustdice_wordpress_published_20250624_114341.json",
        "type": "config",
        "size": 10377,
        "last_modified": "2025-06-24T11:43:41"
      },
      {
        "name": "enhanced_restricted_countries_test_results.json",
        "path": "enhanced_restricted_countries_test_results.json",
        "type": "config",
        "size": 2705,
        "last_modified": "2025-06-26T09:41:39"
      },
      {
        "name": "bitcasino_complete_chain_results_20250623_082841.json",
        "path": "bitcasino_complete_chain_results_20250623_082841.json",
        "type": "config",
        "size": 48198,
        "last_modified": "2025-06-23T08:28:41"
      },
      {
        "name": "coinflip_mt_casino_demo_results_20250623_132100.json",
        "path": "coinflip_mt_casino_demo_results_20250623_132100.json",
        "type": "config",
        "size": 2587,
        "last_modified": "2025-06-23T13:21:00"
      },
      {
        "name": "betsson_production_lcel_20250627_082209.json",
        "path": "betsson_production_lcel_20250627_082209.json",
        "type": "config",
        "size": 33718,
        "last_modified": "2025-06-27T08:22:09"
      },
      {
        "name": "trustdice_complete_chain_results_20250624_121220.json",
        "path": "trustdice_complete_chain_results_20250624_121220.json",
        "type": "config",
        "size": 13686,
        "last_modified": "2025-06-24T12:12:20"
      },
      {
        "name": "betway_complete_pipeline_20250617_212903.json",
        "path": "betway_complete_pipeline_20250617_212903.json",
        "type": "config",
        "size": 10664,
        "last_modified": "2025-06-17T21:29:03"
      },
      {
        "name": "trustdice_complete_chain_results_20250624_101927.json",
        "path": "trustdice_complete_chain_results_20250624_101927.json",
        "type": "config",
        "size": 12329,
        "last_modified": "2025-06-24T10:19:27"
      },
      {
        "name": "crashino_production_20250625_182905.json",
        "path": "crashino_production_20250625_182905.json",
        "type": "config",
        "size": 27551,
        "last_modified": "2025-06-25T18:29:05"
      },
      {
        "name": "mr_vegas_publishing_report.json",
        "path": "mr_vegas_publishing_report.json",
        "type": "config",
        "size": 1266,
        "last_modified": "2025-08-24T21:59:25"
      },
      {
        "name": "dataforseo_demo_results_20250615_153924.json",
        "path": "dataforseo_demo_results_20250615_153924.json",
        "type": "config",
        "size": 582551,
        "last_modified": "2025-06-15T15:39:24"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_141919.json",
        "path": "trustdice_mt_casino_fixed_20250624_141919.json",
        "type": "config",
        "size": 9660,
        "last_modified": "2025-06-24T14:19:19"
      },
      {
        "name": "trustdice_complete_chain_results_20250624_101508.json",
        "path": "trustdice_complete_chain_results_20250624_101508.json",
        "type": "config",
        "size": 12288,
        "last_modified": "2025-06-24T10:15:08"
      },
      {
        "name": "bitcasino_real_mt_casino_results_20250622_143947.json",
        "path": "bitcasino_real_mt_casino_results_20250622_143947.json",
        "type": "config",
        "size": 386,
        "last_modified": "2025-06-22T14:39:47"
      },
      {
        "name": "betway_complete_chain_results_20250621_123558.json",
        "path": "betway_complete_chain_results_20250621_123558.json",
        "type": "config",
        "size": 13270,
        "last_modified": "2025-06-21T12:35:58"
      },
      {
        "name": "mr_vegas_wordpress_publication_mr_vegas_casino.json",
        "path": "mr_vegas_wordpress_publication_mr_vegas_casino.json",
        "type": "config",
        "size": 9238,
        "last_modified": "2025-08-22T19:12:35"
      },
      {
        "name": "betway_complete_chain_results_20250621_121904.json",
        "path": "betway_complete_chain_results_20250621_121904.json",
        "type": "config",
        "size": 12402,
        "last_modified": "2025-06-21T12:19:04"
      },
      {
        "name": "777_casino_production_20250625_200051.json",
        "path": "777_casino_production_20250625_200051.json",
        "type": "config",
        "size": 20018,
        "last_modified": "2025-06-25T20:00:51"
      },
      {
        "name": "betway_complete_chain_results_20250618_134525.json",
        "path": "betway_complete_chain_results_20250618_134525.json",
        "type": "config",
        "size": 9851,
        "last_modified": "2025-06-18T13:45:25"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_123954.json",
        "path": "trustdice_mt_casino_fixed_20250624_123954.json",
        "type": "config",
        "size": 10200,
        "last_modified": "2025-06-24T12:39:54"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_122914.json",
        "path": "trustdice_mt_casino_fixed_20250624_122914.json",
        "type": "config",
        "size": 9982,
        "last_modified": "2025-06-24T12:29:14"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_132851.json",
        "path": "trustdice_mt_casino_fixed_20250624_132851.json",
        "type": "config",
        "size": 10055,
        "last_modified": "2025-06-24T13:28:51"
      },
      {
        "name": "ladbrokes_production_fixed_20250625_144638.json",
        "path": "ladbrokes_production_fixed_20250625_144638.json",
        "type": "config",
        "size": 9752,
        "last_modified": "2025-06-25T15:02:53"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_140914.json",
        "path": "trustdice_mt_casino_fixed_20250624_140914.json",
        "type": "config",
        "size": 9955,
        "last_modified": "2025-06-24T14:09:14"
      },
      {
        "name": "trustdice_complete_chain_results_20250624_115642.json",
        "path": "trustdice_complete_chain_results_20250624_115642.json",
        "type": "config",
        "size": 14400,
        "last_modified": "2025-06-24T11:56:42"
      },
      {
        "name": "bitcasino_complete_chain_results_20250623_082012.json",
        "path": "bitcasino_complete_chain_results_20250623_082012.json",
        "type": "config",
        "size": 13264,
        "last_modified": "2025-06-23T08:20:12"
      },
      {
        "name": "bwin_casino_production_20250625_191204.json",
        "path": "bwin_casino_production_20250625_191204.json",
        "type": "config",
        "size": 23325,
        "last_modified": "2025-06-25T19:12:04"
      },
      {
        "name": "trustdice_complete_chain_results_20250624_114044.json",
        "path": "trustdice_complete_chain_results_20250624_114044.json",
        "type": "config",
        "size": 10035,
        "last_modified": "2025-06-24T11:40:44"
      },
      {
        "name": "direct_wordpress_success_20250624_123431.json",
        "path": "direct_wordpress_success_20250624_123431.json",
        "type": "config",
        "size": 370,
        "last_modified": "2025-06-24T12:34:31"
      },
      {
        "name": "bitcasino_complete_chain_results_20250623_081653.json",
        "path": "bitcasino_complete_chain_results_20250623_081653.json",
        "type": "config",
        "size": 14061,
        "last_modified": "2025-06-23T08:16:53"
      },
      {
        "name": "trustdice_live_publish_20250624_115159.json",
        "path": "trustdice_live_publish_20250624_115159.json",
        "type": "config",
        "size": 29061,
        "last_modified": "2025-06-24T11:51:59"
      },
      {
        "name": "crashino_content_20250625_182138.json",
        "path": "crashino_content_20250625_182138.json",
        "type": "config",
        "size": 28190,
        "last_modified": "2025-06-25T18:21:38"
      },
      {
        "name": "enhanced_pipeline_demo_20250617_135152.json",
        "path": "enhanced_pipeline_demo_20250617_135152.json",
        "type": "config",
        "size": 1216,
        "last_modified": "2025-06-17T13:51:52"
      },
      {
        "name": "betway_complete_pipeline_20250617_135646.json",
        "path": "betway_complete_pipeline_20250617_135646.json",
        "type": "config",
        "size": 9951,
        "last_modified": "2025-06-17T13:56:46"
      },
      {
        "name": "bitcasino_mt_casino_results_20250622_095725.json",
        "path": "bitcasino_mt_casino_results_20250622_095725.json",
        "type": "config",
        "size": 40886,
        "last_modified": "2025-06-22T09:57:25"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_130119.json",
        "path": "trustdice_mt_casino_fixed_20250624_130119.json",
        "type": "config",
        "size": 9653,
        "last_modified": "2025-06-24T13:01:19"
      },
      {
        "name": "betway_complete_test_results_20250617_161814.json",
        "path": "betway_complete_test_results_20250617_161814.json",
        "type": "config",
        "size": 5897,
        "last_modified": "2025-06-17T18:29:47"
      },
      {
        "name": "ladbrokes_production_fixed_20250625_145900.json",
        "path": "ladbrokes_production_fixed_20250625_145900.json",
        "type": "config",
        "size": 9706,
        "last_modified": "2025-06-25T15:02:53"
      },
      {
        "name": "bwin_working_solution_20250625_192716.json",
        "path": "bwin_working_solution_20250625_192716.json",
        "type": "config",
        "size": 21726,
        "last_modified": "2025-06-25T19:27:16"
      },
      {
        "name": "betway_complete_chain_results_20250621_123211.json",
        "path": "betway_complete_chain_results_20250621_123211.json",
        "type": "config",
        "size": 12691,
        "last_modified": "2025-06-21T12:32:11"
      },
      {
        "name": "bitcasino_complete_chain_results_20250623_074911.json",
        "path": "bitcasino_complete_chain_results_20250623_074911.json",
        "type": "config",
        "size": 13709,
        "last_modified": "2025-06-23T07:49:11"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_143152.json",
        "path": "trustdice_mt_casino_fixed_20250624_143152.json",
        "type": "config",
        "size": 9834,
        "last_modified": "2025-06-24T14:31:52"
      },
      {
        "name": "betsson_production_lcel_20250627_081732.json",
        "path": "betsson_production_lcel_20250627_081732.json",
        "type": "config",
        "size": 33718,
        "last_modified": "2025-06-27T08:17:32"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_124307.json",
        "path": "trustdice_mt_casino_fixed_20250624_124307.json",
        "type": "config",
        "size": 9775,
        "last_modified": "2025-06-24T12:43:07"
      },
      {
        "name": "blitz_casino_production_complete_20250625_190034.json",
        "path": "blitz_casino_production_complete_20250625_190034.json",
        "type": "config",
        "size": 18848,
        "last_modified": "2025-06-25T19:00:34"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_130558.json",
        "path": "trustdice_mt_casino_fixed_20250624_130558.json",
        "type": "config",
        "size": 9282,
        "last_modified": "2025-06-24T13:05:58"
      },
      {
        "name": "REAL_RAG_technical_20250618_182631.json",
        "path": "REAL_RAG_technical_20250618_182631.json",
        "type": "config",
        "size": 1236,
        "last_modified": "2025-06-18T18:26:31"
      },
      {
        "name": "betway_complete_test_results_20250617_161716.json",
        "path": "betway_complete_test_results_20250617_161716.json",
        "type": "config",
        "size": 4132,
        "last_modified": "2025-06-17T18:29:47"
      },
      {
        "name": "95_field_analysis_results.json",
        "path": "95_field_analysis_results.json",
        "type": "config",
        "size": 2272,
        "last_modified": "2025-06-18T12:51:42"
      },
      {
        "name": "bitcasino_complete_chain_results_20250622_095347.json",
        "path": "bitcasino_complete_chain_results_20250622_095347.json",
        "type": "config",
        "size": 12879,
        "last_modified": "2025-06-22T09:53:48"
      },
      {
        "name": "bitcasino_simple_mt_casino_results_20250623_094608.json",
        "path": "bitcasino_simple_mt_casino_results_20250623_094608.json",
        "type": "config",
        "size": 50108,
        "last_modified": "2025-06-23T09:46:08"
      },
      {
        "name": "trustdice_mt_casino_fixed_20250624_131124.json",
        "path": "trustdice_mt_casino_fixed_20250624_131124.json",
        "type": "config",
        "size": 10188,
        "last_modified": "2025-06-24T13:11:24"
      },
      {
        "name": "coinflip_mt_casino_demo_results_20250623_123446.json",
        "path": "coinflip_mt_casino_demo_results_20250623_123446.json",
        "type": "config",
        "size": 2368,
        "last_modified": "2025-06-23T12:34:46"
      },
      {
        "name": ".pre-commit-config.yaml",
        "path": ".pre-commit-config.yaml",
        "type": "config",
        "size": 3390,
        "last_modified": "2025-06-12T13:10:25"
      },
      {
        "name": ".readthedocs.yaml",
        "path": ".readthedocs.yaml",
        "type": "config",
        "size": 697,
        "last_modified": "2025-06-12T13:10:25"
      },
      {
        "name": "pyproject.toml",
        "path": "pyproject.toml",
        "type": "config",
        "size": 3635,
        "last_modified": "2025-06-12T13:10:26"
      },
      {
        "name": "poetry.toml",
        "path": "poetry.toml",
        "type": "config",
        "size": 32,
        "last_modified": "2025-06-12T13:10:26"
      }
    ]
  }
}